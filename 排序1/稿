排序算法，比如选择排序、冒泡排序，是各种高校、培训班、面试题的必选项，然而，很多人只是略能默写，分不清优劣，对这种有趣的程序有点可惜

小学信息技术也有Py的选择排序实现，其实选择排序就是更易写的插入(即交换)排序，你不用按索引读写数组、或自己处理最大值(max)的更新而已

把数字类比成人的「高矮」乍一看利于理解，其实反而给思索增加了难度——人的高矮比数字的大小顺序更容易看出吗？这里咱用 `正序(a,b)` 的真假性来定义值的顺序 (a的索引<b, 即a在b前, 默认越前越小)

其实很多时候不是你搞不懂算法的基本原理，而是对数组索引不太熟，卡在索引计算上了；那么直观看见算法对数组的操作过程，会不会略有俾益？动苏花了一天时间，写了 150 行JS代码，四个算法指针可视化，一起看看吧

下面名称中 a是列表,任何i 是 0~N(a)-1 中的索引号，复习下0是第一项，如 [1,2] 长N=2 区间 0~1,即末引

插入排序默认 i1 后(初始时 末引-i1=0)的子表是有序的, 每轮i 从(0止i1)把 a[i1] 置为其与 a[i] 的最大值， i 迭代一遍 a[i1] 就是前部的最大值, 不会大于 i1+1

冒泡排序可能是相当慢且不比插入简单的排序——如你所见除了把检查的两项改从 i,i1 成相邻项，即修改i的区间保证i-1不出界，这个算法没有任何升级

下面我们要看的是两个基于分治法的排序，分治是把数据分成几块，各自处理再合并的方法(有点类似 MapReduce,但分治不一定合并返回值)

快速与合并排序的不同在于，快排是先自身后子表，而合并事如其名，是子表先有序再把二者归为有序列

快排以中点把列表划分成<它,>=它 的两部分，并对其施用自身，直到<2项的绝对有序情况
合并以中点把列表分成两个子表，直到<2项，每层开始把自己的两列项按其[0]位小先移除的顺序输出，直到两边清空，所以每层的左右列是各自有序的

我们知道算法复杂度是其操作数(如数组读写,交换其索引)随输入数据量的变化率，过于简单或冗杂的算法往往能轻松解决小的输入，可那是基于CPU本身每秒几百万条操作的速度，如果数据有个那么几MB(2^10 字节,整数4=2*2字节)，就不行辣~

选择插入冒泡排序的复杂度都是 O(n*n) ，你可能好奇三者中第二层循环次数明明越来越小为何不算上。其实复杂度也只是参考——程序执行耗时不止和输入量有关，所以很少算乘方级别以下的项。

快速排序是 O(n*log2 n) ，第一个 n 是每层级所有子表总长，log 是乘方求底数，此处是中点二分的层深度， x=log2 n, x**2=n ；这些是理论不会就算了

另外，规劝大家一句不要手写排序算法，也不要写一些和应用行为没直接关系的代码，四年老程序猿告诉你，你程序再慢慢不过下层库，排版再合规再美也不会变得更快。这是思维不是断行成诗；

所以我们要学习算法，有更开阔的眼界未必能让你做到更多，但它确实能让你更少受到自满、虚荣这些因素的影响，让你能变着方法写出程序最美的版本；是指代码和算法语义，内外都漂亮。

当然，如果点赞过百我会更新排序篇的下一期——包含 Shell希尔分块插入排序和 Python,JDK 都在用的 TimSort 预规划归并排序 ，喜欢记得长按三连+不吐不快的弹幕，拜拜~
