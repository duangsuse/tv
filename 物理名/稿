以前很讨厌把 item 缩写成x, predicate 缩写成 p 这些单字母命名,现在就是一把梭
以前非常在意缩进，而且不喜欢箭头替代function，顶层一大堆定义都得有一格，现在如果是很长的函数,{}对象 不会加缩进，逗号变量甚至不带初值也很爱用
总的来说是整个人C甚至偶尔bash化了，仿佛是那个时代的程序员
以前会区分 const 和 let, 会避免在参数和重赋值里利用解构, 现在更多用 let
以前会避免在箭头函数里用默认值甚至 [a,b] 解构默认值 (当然递归函数避免用默认参数是应该的)

以前从来不用 hile(i--), 也从不把 1 当 true, 现在非正式项目语义小差异就会用


编程是优美的设计，不是复杂的堆砌。
当你在写一段程序的时候，你对软件整体有观感吗？知道它涉及什么领域的，有什么交互(广义,库函数也有)细节吗
比如咱在没写 xy 函数图的时候，知道肯定涉及基础计算机绘制,函数移动缩放,DOM事件
注意没提及任何canvas这些具体的术语啊,提的只是 java Graphics, QPainter, PIL,OCV 都会有的绘制模型

很多时候你对软件到底要做什么,有那些基本生命周期流程,需要什么配置变量 都没有一个概念,你当然也很难切分出最复用的动词集, 因为你不知道当下的子程序到底是对输入和环境有什么要求,输入上又有哪些变量,又要访问多少, 所以会给这些名词, 你看不到这个动词和其他动名词关系的全貌
就会首先去逐个击破，拆成可测试的部分找到相对简单的方法再粘起来。


你可以尝试快速编程,快速迭代; 每版大部分代码都是复制的但你会改掉之前工作正常但有更易懂方法的某一打函数

