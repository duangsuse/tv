首先这里操作系统的定义绝不止一个 UI 即 `explorer.exe` 图形shell(窗口管理器+任务栏)，
就排除了 PPTos,[98.css], 
Scratch,VB 仿桌面等可插件(统一风格窗口)界面项目
为了这期视频我特意回溯到DOS人人裸机BIOS应用的时代看了点文，
感觉那个时代人是处处跟自己汇编的目标 指令平台(ISA)作对、
机器是各种不支持各种窄又废，
比尔盖茨曾说，
640K肯定够用一辈子了
(那时他的对手只支持64K)，
就像2K年的千年虫(year2k)，
97肯定不会跳回20；那时电子晶震 CPU时钟都不会超过200kHz但这次视频也不提太多专业知识，
此次的『操作系统』指代80x86
(8086的改进,
386引入虚地址)机上和 BIOS,GRUB 一样 __运行在Ring0 ，
被实模式应用加载的 x86 (虚地址内存)保护模式
管理工具__，一个带Logo的 ~~VGA打字机~~，
没错这回没有 上下文切换PCB、[IDT], [8259A中断]注册 等专业内容反正，有了你们也不会看；就像某些企业家说是支持国产系统，其实只是想跟个风
CPU上电后执行的第一条指
令是从BIOS开始(
嵌入式设备BL fastboot一般都是固件 单次烧写,无外置存储)，
而BIOS会负责从软硬盘、CD搜索 按bootable2字节 
AA55魔数结尾的 1K引导代码到7c00；
 BIOS 也是有字符终端功能的，
 不然哪来配置界面，
DOS其实就是它套了个FAT文件系统个命令解释器 command.com
在DOSBox我们可以访问 int 0x21 的DOS系统调用、
BIOS中断和ivt注册、设备端口IO 和实模式1M/ DOS知名的640K内存，
但肯定希望能在 qemu 上运行 不靠GRUB或winBootmgr，
毕竟那才像系统(尽管也有 [multiboot] 等启动协议)，
好。
了解C代码的人肯定知道C比汇编高了二三层，
x86机器码是没有ld-linux.so 链接器(-fpic/-fPIC)、libc、栈调用规范这些概念的，
用C语言写[boot
sect]，
相当于 Linux 0.11 为方便自带的引导加载器(
现在GRUB就是它的规范)，
用C写MBR代码并没有简写的红利且要截掉函数头部栈指针的链增，
因此我用js简短的预处理下=;符号 由[GAS汇编]，
免得你们要安NASM才能编译模拟运行额谈一下现在中国这个「操作系统」「核心科技」风
，其实它就是利用大众的国产心理 造个热度开始蹭。
完全国内成分的有吗？__有但没人敢用，或者软件不多，
大部分原创的如 Deepin,Remix/Androidx86,
Fyde 也有，
但叫的不可能有那些魔改开源Logo 卖钱的中标麒麟一流响的__，
哦，是中标(投标)麒麟
说白了就是应用层蹭
 真正系统工程侧的叫好不叫坐，
那努力自我提升的心不知有多少，
但
想以小投入搏大眼球的、
至少赚波人气的 心态是绝对有。
你要想真做做不出？
其实是没思考怎么招人，以及这个最后有多少前景，回报得>投资啊，
人家是营利
不是慈善性质啊；
不是啥帝国主义技术封锁，
那不有台积电有龙芯吗？
经济不投缘罢了。
叫了这么久背后兢兢业业提供 存储、传感器、屏幕 的半导体业、
机器码解释器 有人出来跟风吗？没有，
因为踏踏实实研究的人，没空呼喊那些口号。
毕竟想推进，只有用手，
而不是爱
闲话好否定的嘴。
真正意义的『操作系统内核』三要素：
__线程调度内存隔离、文件设备(fat32,ext4,IRQ)、
IP网络和并发工具(IPC,sem,mutex)__
如果一个人写了线程池或malloc()或ELF文件链接器，
声称自己写了操作系统 是可以的(比如GNU)；
如果一个人在
磁盘MBR写了 内核特权级，就是不用DOS功能的DOS程序
，或者做了几个统一风格UI，声称自己写了操作系统 是不好的；这是我对此领域的认知。只有一个开发者对目标『应用』所有的(语言)API所需的字节结构，有层次清晰的认知，
随便举一个过程他都能清楚这对『裸机』上有几段操作，
他才有资格谈『操作系统』；
简单点说，
就是他能从C代码看到对应汇编
只觉得操作系统 内核是核心技术的人，
若作为一个框架下程序员或运维，
没有资格提这个词，
__因为无论什么内核
你们的代码都能兼容，它对你只是编译参数里的名字而已。__
曾站在比POSIX更低的地方，却能清晰看见应用之高所需的硬件状态和文件管道等资源共享，
堆砌着脚下基石 却看清更高的目的(GCC)，
这是系统级程序员的基本功。说难也不难。
Linux没有一行代码、一个数值是靠删改重试猜出来的。
如果有，会被Linus骂：
要么理论验证，要么请上千万台各类设备帮你实机验证。
 应用层会想一个功能最少需要几行代码来定义吗？
内核在 Linux 上 vmlinuz 是 ELF 格式可执行 由GRUB,syslinux ，
在 Win32 是 ntoskrnl.exe 
由bootmgr，
都是自己家的可执行格式
(反正就是存代码和数据节,
加载到内存的节称段)，
它们把裸机键鼠视频、内存、CPU多核，虚拟化出 stdIO流、framebuffer v4l
2、mmap,brk/sbrk、
execve(argv,env)
与pthread 等统一API，
内核初始化后只有调度器是每CPU上总在执行的
__也就是说系统内核不是服务，
而更像一个有特权的库__，它
最必要任务是：
这个进程你做1ms了先暂停，
那个更nice 的你恢复执行，
求我从 openat("/etc/shadow") 写到你的内存片？
你uid权限不够。
求我从你的内存写到 pipe(23) ，
我把它复制到内核堆；暂停再换进程，
要从 pipe(23) read()数据？
 process_vm_writev 给你。
进程、线程、函数协程，
不同隔离度的任务(读写,网络,等待输入..)并发执行
以上是虚拟终端执行 `cat
 /etc/shadow` stderr_fd=2 "权限不够" 
显示到终端窗口的过程
你觉得 `int32_t i; i+=1; 
i-=1; print(i)` 代表三个什么？
i是内存片4字节的独占空间，3动作有先后顺序，语义就正确。
所以我 `for(;;)sleep(1);` 
会不会卡死整个电脑？DOS 里会的，
但CPU上调度器能抢占时间片结束的死循环，
保存现场，
切换到其他任务，
看起来就像同时有多任务在执行一样，
async协程、Promise闭包都是一个道理：
任务能暂停等待唤醒
调度是以线程为单位的，分用户内存和文件才有进程，
但大部分应用只有主线程 很多人不区分这个，
所以他们也不知道 __onclick listen 啥的只是注册了一个函数让系统主循环能访问到，
完整的UI是要响应交互-
重绘的__，你的应用只定义了控件显示内容
 像内存对象回收就需要GC或Rc，
 你不需要考虑内核眼你应用的进程由啥构成，
 布局渲染啦垃圾回收啦，
只要用户点哪里 啥变化，这叫应用层程序员思维。
写内核是裸机应用，从x86平台已有的实现你应用需要的，
不是从你写过一两个 Java的C++Qt 复用高的软件猜内核会咋样高难度
，不敢想呢；
无论是应用还是系统编程，编程就只是从基本结构有技巧的堆出能用的程序，
想做出想简化，永远有方法，
只是这资料可难得找，
如果你从没离开过国内的『互联网』也不爱读书，劝退吧。
操作系统是由核心态设备事件IO+用户态 libc、
init服务、
交互shell、用户App 组成的，
当然也可以像 ChromeOS 那样
不需DBus,
ge
tty 等服务run-command 
靠另一个完善的
用户级系统和Web应用取代shell界面 了
连自己的代码被转化到含哪些信息的『可执行』或怎样注册表流程的『安装包』，再以哪种方式加载执行都不知道，有什么底气谈操作系统这个宏大的软件、算法集合？
这个box提供了设置/树和外设的shell脚本，
靠启动进程最终达到设备日用目的，
它还是要 libc.so dll库，
加载动态链接才能执行的，
所以说对程序对应的数据不了解，或者说不懂汇编 很难理解系统和用户程序概念性的区别，
__系统所代表的ABI
 并非只是内核的不同__。
可以说所有内核功能和argv,
environ等通用ABI定义都是为应用，
或它们依赖的服务及设备
比如DBus,
Xorg
,strace调试器,ip addr 服务的，
但内核的目的性只是把计算机的算力、内存外存、
外设以更简单安全的方式让人利用，
就像chroot ，
它是一种统一底层
硬件的虚拟化，
它源码、
模组的层次是为这服务
这都是理论
因为只有看清楚软件是为了什么而用，
开发者才不会止于复制。
对libc(kernel32,user32)而言系统真正的 API 是 syscall列表+main入口的栈/寄存器，
对C语言系统API是stdlib, 
以 CDEF等C调用规定 和动态链接linker (仅编译器可见)
并称为 ABI，
如 glibc,
msvc,
musl,bionic 等内核功能的封装和 malloc 堆等只需用户态资源的算法
