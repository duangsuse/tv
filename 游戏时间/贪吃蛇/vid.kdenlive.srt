1
00:00:01,720 --> 00:00:05,160
欸，我眼前的这是什么东西，弯弯曲曲的，蚊子吗？

2
00:00:05,522 --> 00:00:08,341
这是一条队列，它有一个队头(pop)、一个队尾，

3
00:00:08,550 --> 00:00:11,610
每次最新一点“蛇头”朝当前方向，涂黑一格；

4
00:00:11,800 --> 00:00:16,088
最老点清除掉，就像一条在爬行的线 哦不 蛇了。

5
00:00:16,440 --> 00:00:21,570
而它依附的网格(grid)，有 n 行 m 列，就是说每行分配 m 个格子；

6
00:00:21,750 --> 00:00:25,470
<i>称为 `int[n][m] a; ` 或 List< List>，</i>

7
00:00:25,740 --> 00:00:27,906
那 a[i=0] 就是第一行、

8
00:00:28,171 --> 00:00:31,049
`a[i=0][j=0] `就是左上角第一格、

9
00:00:31,360 --> 00:00:34,740
` a[n-1][m-1] `就是右下角最右一格；

10
00:00:35,010 --> 00:00:36,570
记好，才能计算通

11
00:00:36,840 --> 00:00:37,860
消化下：

12
00:00:38,190 --> 00:00:40,020
a[3][4] 是第几行？

13
00:00:40,200 --> 00:00:40,890
a[0] 呢?

14
00:00:41,160 --> 00:00:42,990
既然每行固定m列，

15
00:00:43,200 --> 00:00:44,610
a 也可以是 List

16
00:00:44,850 --> 00:00:45,330
(n*m) ，

17
00:00:45,599 --> 00:00:46,557
a[3][4]=

18
00:00:46,739 --> 00:00:48,090
a[3*m+4] ，

19
00:00:48,359 --> 00:00:50,760
a[2][4]=a[2*m+4] ，

20
00:00:51,060 --> 00:00:53,070
这也是像素图存储的形式，

21
00:00:53,340 --> 00:00:55,980
若嵌套数组不能方便我们的计算和思考，

22
00:00:56,190 --> 00:00:57,210
不妨抛弃它。

23
00:00:57,570 --> 00:01:01,770
贪吃蛇里我们利用坐标的方式只有取得其上下左右4点，

24
00:01:02,010 --> 00:01:04,170
即 [-m,+m,-1,+1]

25
00:01:04,432 --> 00:01:05,790
四个偏差量，

26
00:01:06,030 --> 00:01:07,590
数据怎么建模无所谓，

27
00:01:07,770 --> 00:01:09,060
程序简明更为重要

28
00:01:11,190 --> 00:01:15,720
其实我挺奇怪，为什么编程学习者会对这个简单游戏有愿望。

29
00:01:15,960 --> 00:01:17,670
毕竟它就是在像素图上，

30
00:01:17,910 --> 00:01:20,790
弄个长度和分数成正比的先进先出(FIFO)队列；

31
00:01:20,970 --> 00:01:22,076
时差更新而已，

32
00:01:22,320 --> 00:01:26,010
那么我们可以得到一个最简的「无显示」网页贪吃蛇，

33
00:01:26,250 --> 00:01:27,540
这不是伪代码

34
00:01:30,020 --> 00:01:33,780
你可能觉得很复杂，但核心只有后两行，

35
00:01:33,990 --> 00:01:34,619
d=d新

36
00:01:35,070 --> 00:01:37,800
是因为用户可能在 步() 前多次按键，

37
00:01:38,070 --> 00:01:42,273
但每次蛇转向都必须满足 d+d1!=0,NaN

38
00:01:42,570 --> 00:01:44,760
即p+=d不回头的条件；

39
00:01:44,970 --> 00:01:48,030
你可以把击键存下来在 步() 里逐个识别，

40
00:01:48,300 --> 00:01:50,760
但不方便支持多玩家/触摸控制

41
00:01:51,210 --> 00:01:52,410
p+=d 后

42
00:01:52,650 --> 00:01:56,250
判断 阵[p]，死时不再爬、吃果不去尾

43
00:01:56,520 --> 00:02:00,630
让我来听听有没有小可爱，说蛇只能在用户按键时移动，

44
00:02:00,840 --> 00:02:02,490
因为不知道方向是啥？

45
00:02:02,670 --> 00:02:03,690
啊不存在的。

46
00:02:03,900 --> 00:02:06,586
按一次，移一格，那还有撞死的蛇啊

47
00:02:07,200 --> 00:02:10,590
JS a.push(项) 索引的方向是向右，

48
00:02:10,800 --> 00:02:11,490
i++ ；

49
00:02:11,700 --> 00:02:14,218
那么蛇头就是 `a[a.length-1]` ，

50
00:02:14,430 --> 00:02:16,800
蛇尾就是 a_0=a.shift() ，

51
00:02:17,040 --> 00:02:22,830
你知道第一次 push 的最先 shift 就对了；反方向的 unshift,pop 慢不推荐

52
00:02:23,220 --> 00:02:25,830
也就是说如果你看 ps 这条蛇，

53
00:02:26,040 --> 00:02:27,240
它的头是在右边，

54
00:02:27,420 --> 00:02:31,080
它的身体块“死掉”是从左边，没苹果其长度就恒定

55
00:02:31,320 --> 00:02:35,340
把 p,d,ps 与阵 N:1 独立为class后，

56
00:02:35,610 --> 00:02:37,710
我们利用 pad[1]=

57
00:02:37,920 --> 00:02:39,960
{w:-m,a:-1,

58
00:02:40,140 --> 00:02:41,250
s:+m,

59
00:02:41,460 --> 00:02:43,890
d:+1} 很容易支持玩家2 ，

60
00:02:44,100 --> 00:02:45,810
pad.forEach((o,i)=>{

61
00:02:46,080 --> 00:02:47,640
let d1=o[k];

62
00:02:47,850 --> 00:02:48,720
if(d1

63
00:02:48,960 --> 00:02:52,470
&&d1+snk[i].d!=0)

64
00:02:52,710 --> 00:02:54,510
dnew.push([i,d1]) })

65
00:02:54,690 --> 00:02:59,010
就是这回合每条蛇的动作，然后 死掉(snk) 可以加个参数

66
00:03:00,300 --> 00:03:01,410
触控的话

67
00:03:01,620 --> 00:03:03,210
用户按下和抬起鼠标/

68
00:03:03,390 --> 00:03:04,530
手指会生成两个点

69
00:03:04,770 --> 00:03:05,520
p0,p1 ，

70
00:03:05,734 --> 00:03:07,080
p1-p0 是它们的

71
00:03:07,320 --> 00:03:11,760
距离，方向是1是m 由x,y 绝对值大小决定，

72
00:03:11,970 --> 00:03:17,250
符号+-是刚刚最大值的符号，我们的坐标系正好是网页右下系；

73
00:03:17,580 --> 00:03:20,610
多玩家把这个结果按 p0.x 分派就好，

74
00:03:20,880 --> 00:03:23,700
当然如果屏幕竖着就是 p0.y

75
00:03:25,830 --> 00:03:26,760
然后就是

76
00:03:27,060 --> 00:03:28,890
绘()和主循环(f)的实现，

77
00:03:29,070 --> 00:03:31,260
我给你一个不解释的grid版本。

78
00:03:31,530 --> 00:03:33,480
之前只说3是苹果方块，

79
00:03:33,720 --> 00:03:37,170
那按顺序：空 蛇 墙 苹果 ；简单吧

80
00:03:37,980 --> 00:03:40,770
为啥贪吃蛇能隔开所谓的「小白大佬」

81
00:03:41,221 --> 00:03:44,699
鄙视链是从命令行 IO API 的熟练度，开始的。

82
00:03:44,880 --> 00:03:49,710
我刚刚给你的30行绘制实现支持 grid 背景色和 canvas 贴图绘制，

83
00:03:49,980 --> 00:03:51,390
甚至渲染到字符串

84
00:03:51,630 --> 00:03:52,919
如果你在 d=d新;

85
00:03:53,130 --> 00:03:54,690
前 ds.push(d);

86
00:03:54,900 --> 00:03:55,826
我还能利用 CSS

87
00:03:56,014 --> 00:03:57,840
动画支持像高山流水、

88
00:03:58,140 --> 00:04:00,540
炸弹人里人物移动一样丝滑的贪吃蛇，

89
00:04:00,870 --> 00:04:04,410
点赞过50就和AI,自定义关卡地图/礼物

90
00:04:04,710 --> 00:04:06,210
(增穿反速)一起做；

91
00:04:06,541 --> 00:04:11,010
点赞过150我会在黄金矿工后讲贪吃蛇大作战和联机

92
00:04:11,580 --> 00:04:18,329
但是用命令行的人单纯觉得酷啊， 或者有些人就只知道那一种 狭隘的方法完成一项任务，

93
00:04:18,600 --> 00:04:21,510
其实 Linuxer man ioctl_tty

94
00:04:21,690 --> 00:04:33,540
就会发现字符终端根本有许多操作， 比如查询行列数的 ioctl(stdin,GWINSZ； 比如把 fgetc(stdin) 变成用户无输入立刻返回 -1 的 tcag/setattr 类似 conio.h 的 _kbhit()?

95
00:04:33,810 --> 00:04:34,619
getch():

96
00:04:35,310 --> 00:04:35,670
-1 ；

97
00:04:35,970 --> 00:04:40,140
带来终端色彩的 ANSI \x1b 即 \033 也有 [H 光标重设序列

98
00:04:40,380 --> 00:04:43,440
一些人只会用 system("cls") 清屏

99
00:04:43,650 --> 00:04:45,510
不知道wincon.h里有

100
00:04:45,750 --> 00:04:47,310
SetConsoleCursorPosition(COORD{short x,y}) ，

101
00:04:47,670 --> 00:04:49,410
创建进程的开销很高

102
00:04:49,590 --> 00:04:51,360
根本不适合每秒7,8次。

103
00:04:51,660 --> 00:04:54,360
这当然不是他们的错，但铸就了鄙视链

104
00:04:54,630 --> 00:04:56,309
说到对性能没概念，

105
00:04:56,490 --> 00:04:59,850
我还见过一个每帧都读写整个位图的无队列实现，

106
00:05:00,150 --> 00:05:02,520
它的墙和苹果(苹果只能创建一个)是 INT_MAX ，

107
00:05:02,730 --> 00:05:04,410
新蛇头写入当前长度，

108
00:05:04,800 --> 00:05:06,570
模拟了N回合后涂白的行为，

109
00:05:06,870 --> 00:05:13,320
原作者还用 `(int)malloc(1)` 这种 C++ 里非法的指针转数初始化 srand，

110
00:05:13,560 --> 00:05:16,800
明显是毫无理论基础的人思而不学猜出来的，

111
00:05:16,980 --> 00:05:18,180
我也真是无语

112
00:05:18,840 --> 00:05:20,310
国内有这种东西，

113
00:05:20,490 --> 00:05:22,470
另外一层的原因，我就不说了。

114
00:05:22,650 --> 00:05:23,520
只能感叹，

115
00:05:23,790 --> 00:05:25,950
自古同道相害、文人相轻，

116
00:05:26,190 --> 00:05:29,490
幼吾幼以及人之幼的博爱终究比不过小圈内化

117
00:05:30,210 --> 00:05:32,670
我想起了《妙先生》里的一句话，

118
00:05:32,850 --> 00:05:34,380
信仰不能拯救任何人，

119
00:05:34,560 --> 00:05:36,750
是你选择什么信仰拯救自己；

120
00:05:36,960 --> 00:05:39,150
技术大概不能拯救那些小白吧，

121
00:05:39,420 --> 00:05:43,680
因为他们的信仰，是靠把一切的责任和赞美交给被神化的「大佬」

122
00:05:43,860 --> 00:05:46,350
而灭绝所有自信和生长欲，这样吧

123
00:05:46,590 --> 00:05:50,970
当然，看看目前各大教学平台动辄1小时的“超细讲解”录屏、

124
00:05:51,240 --> 00:05:55,020
两三小知识区up的无源码、流水帐讲解我就明白了，

125
00:05:55,260 --> 00:05:58,620
原来是大家对位图上数据的变化并没有深刻的认知，

126
00:05:58,800 --> 00:06:02,730
只是在复刻他人特定语言、特定平台的贪吃蛇实现，

127
00:06:03,000 --> 00:06:05,580
就像CSDN和博客园的码农互抄。

128
00:06:05,880 --> 00:06:08,100
唯一我非常欣赏的动画讲解，

129
00:06:08,310 --> 00:06:10,980
代码风格不明确，至少不适合初学者；

130
00:06:11,220 --> 00:06:13,230
算法入门后没有自己的思考，

131
00:06:13,470 --> 00:06:17,280
也难怪小小一个贪吃蛇，成了所谓大佬小白的分水岭

132
00:06:17,670 --> 00:06:20,460
我很羡慕那些人信手掂俫动画讲解，

133
00:06:20,700 --> 00:06:22,620
它是没有复制到B站，

134
00:06:22,890 --> 00:06:24,240
自称原创嫌疑的，

135
00:06:24,510 --> 00:06:26,790
当然我也不是做不到，还没计划；

136
00:06:27,060 --> 00:06:28,290
但也不是视频越酷越易理解，

137
00:06:28,470 --> 00:06:32,820
最简单的示例，反而能让人对看似复杂的程序，

138
00:06:33,000 --> 00:06:34,166
有个系统的认知。

139
00:06:34,500 --> 00:06:36,840
当时如果听说身边有人做出来了，

140
00:06:37,020 --> 00:06:38,580
也的确觉得很牛逼啊；

141
00:06:38,760 --> 00:06:39,600
他们的游戏，

142
00:06:39,870 --> 00:06:41,760
基于特定数据与判定结构，

143
00:06:41,940 --> 00:06:45,960
而今天，你能在网页、命令行、触摸屏下玩贪吃蛇，

144
00:06:46,200 --> 00:06:48,000
这有什么难吗？给我五分钟，

145
00:06:48,210 --> 00:06:51,000
你会发现这难度，只是含糊其辞带来的

146
00:06:51,270 --> 00:06:53,370
这里感谢下 [Milo Yip]，

147
00:06:53,640 --> 00:06:57,600
虽然二维数组本质，是普通数组 以列长m分块，

148
00:06:57,960 --> 00:07:00,660
是C语言结构与指针入门内容；

149
00:07:00,840 --> 00:07:09,750
但他很好的混合了单格子索引 与 RingBuffer 环形索引复用队列， 我也是在阅读他的回答后， 写了我的第一个贪吃蛇程序，

150
00:07:10,020 --> 00:07:11,970
那时也是仔细一行行抄的，

151
00:07:12,150 --> 00:07:14,550
不过我第二遍就已经外提出许多函数。

152
00:07:14,850 --> 00:07:21,930
你打不打算立刻动工自己的第一次呢？

