欸，我眼前的这是什么东西，弯弯曲曲的，蚊子吗？
这是一条队列，它有一个队头(pop)、一个队尾，每次最新一点“蛇头”朝当前方向，涂黑一格；最老点清除掉，就像一条在爬行的线 哦不 蛇了。
而它依附的网格(grid)，有 n 行 m 列，就是说每行分配 m 个格子；称为 `int[n][m] a; ` 或 List< List<Int>>，那 a[i=0] 就是第一行、 `a[i=0][j=0] `就是左上角第一格、` a[n-1][m-1] `就是右下角最右一格；记好，才能计算通

消化下： a[3][4] 是第几行？ a[0] 呢? 既然每行固定m列，a 也可以是 List(n*m) ，a[3][4]=a[3*m+4] ，a[2][4]=a[2*m+4] ，这也是像素图存储的形式，若嵌套数组不能方便我们的计算和思考，不妨抛弃它。

贪吃蛇里我们利用坐标的方式只有取得其上下左右4点，即 [-m,+m,-1,+1] 四个偏差量，数据怎么建模无所谓，程序简明更为重要

其实我挺奇怪，为什么编程学习者会对这个简单游戏有愿望。毕竟它就是在像素图上，弄个长度和分数成正比的先进先出(FIFO)队列；时差更新而已，

那么我们可以得到一个最简的「无显示」网页贪吃蛇，这不是伪代码

rand=n=>Math.floor(Math.rand()*n)//随机<n
isZ=(i,N)=>i==0||i==N//上,左双墙面

蛇=(n,m)=>{ var 阵=Array(n*m),p,d=1,ps, d新,c, 选=n=>10+rand(n-10)
  初=()=>{ 阵.fill(0); p=选(n)*m+选(m);ps=[p]; 新点(3)//苹果
    for(let i=0,j,p; i<n;i++)for(j=0;j<m;j++,p++)if(isZ(i,n-1)||isZ(j,m-1))阵[p]=2 }
  新点=k=>{let p; do{p=rand(n*m)}while(阵[p]!=0); 阵[p]=k; }
  onkeydown=ev=>{ let d1=[-1,-m,+1,+m] [ev.keyCode-37/*左键*/]; if(d+d1)d新=d1 }
  步=()=>{
    d=d新;p=p+d; if((c= 阵[p])!=0&&c<3) 死掉(); else { ps.push(p);阵[p]=1; c==3? 新点(3) : 阵[que.shift()]=0 }
    绘()
  }
  return[初,步]
}
主循环(蛇(20,30))

你可能觉得很复杂，但核心只有后两行， d=d新 是因为用户可能在 步() 前多次按键，但每次蛇转向都必须满足 d+d1!=0,NaN 即p+=d不回头的条件；你可以把击键存下来在 步() 里逐个识别，但不方便支持多玩家/触摸控制

p+=d 后判断 阵[p]，死时不再爬、吃果不去尾

让我来听听有没有小可爱，说蛇只能在用户按键时移动，因为不知道方向是啥？啊不存在的。按一次，移一格，那还有撞死的蛇啊

JS a.push(项) 索引的方向是向右，i++ ；那么蛇头就是 `a[a.length-1]` ，蛇尾就是 a_0=a.shift() ，你知道第一次 push 的最先 shift 就对了；反方向的 unshift,pop 慢不推荐

也就是说如果你看 ps 这条蛇，它的头是在右边，它的身体块“死掉”是从左边，没苹果其长度就恒定

把 p,d,ps 与阵 N:1 独立为class后，我们利用 pad[1]={w:-m,a:-1,s:+m,d:+1} 很容易支持玩家2 ，pad.forEach((o,i)=>{let d1=o[k]; if(d1&&d1+snk[i].d!=0)yield[i,d1] }) 就是这回合每条蛇的动作，然后 死掉(sn) 可以加个参数

触控的话用户按下和抬起鼠标/手指会生成两个点 p0,p1 ，p1-p0 是它们的距离，方向是1是m 由x,y 绝对值大小决定，符号+-是刚刚最大值的符号，我们的坐标系正好是网页右下系；多玩家把这个结果按 p0.x 分派就好，当然如果屏幕竖着就是 p0.y

触向=(e,k,f)=>{ let x0,y0, q=(k!="touch"),on;
  on=(k1,f)=>e.addEventListener(k+k1,q?f: ev=>{let p=ev.changedTouches[0]||ev.touches[0]; ev.x=p.clientX,ev.y=p.clientY;f(ev)}, {passive:false})
  on((q?"down":"start"),ev=>{x0=ev.x;y0=ev.y}); on((q?"up":"end"),ev=>f(x0,y0,ev.x,ev.y,ev) )//给f机会判断是点击滑移还是游戏内.
}

触向(window,kev,(x0,y0,x,y,ev)=>{ x-=x0;y-=y0; let q=abs(x)>abs(y), v=q?1:m, d=q?x:y; if(abs(d)>2)ev.preventDefault(); dnew.push(0, d<0? -v:v) })

然后就是绘()和主循环(f)的实现，我给你一个不解释的grid版本。之前只说3是苹果方块，那按顺序：空 蛇 墙 苹果 ；简单吧


## 为啥贪吃蛇能隔开所谓的「小白大佬」

鄙视链是从命令行 IO API 的熟练度，开始的。我刚刚给你的30行绘制实现支持 grid 背景色和 canvas 贴图绘制，甚至渲染到字符串

如果你在 d=d新; 前 ds.push(d); 我还能利用 CSS 动画支持像高山流水、炸弹人里人物移动一样丝滑的贪吃蛇，点赞过50就和AI,自定义关卡地图/礼物(增穿反速)一起做；点赞过150我会在黄金矿工后讲贪吃蛇大作战和联机

但是用命令行的人单纯觉得酷啊，或者有些人就只知道那一种狭隘的方法完成一项任务，其实 Linuxer man ioctl_tty 就会发现字符终端根本有许多操作，

比如查询行列数的 ioctl(stdin,GWINSZ, &winsz{short n,m})

比如把 fgetc(stdin) 变成用户无输入立刻返回 -1 的 tcaget/setattr VTIME=VMIN=0 类似 conio.h 的 _kbhit()?getch():-1 ；带来终端色彩的 ANSI \x1b 即 \033 也有 [H 光标重设序列

一些人只会用 system("cls") 清屏不知道 wincon.h 里有 SetConsoleCursorPosition(COORD{short x,y}) ，创建进程的开销很高根本不适合每秒7,8次。这当然不是他们的错，但铸就了鄙视链

说到对性能没概念，我还见过一个每帧都读写整个位图的无队列实现，它的墙和苹果(苹果只能创建一个)是 INT_MAX ，新蛇头写入当前长度，模拟了N回合后涂白的行为，原作者还用 `(int)malloc(1)` 这种 C++ 里非法的指针转数初始化 srand，明显是毫无理论基础的人思而不学猜出来的，我也真是无语

国内有这种东西，另外一层的原因，我就不说了。只能感叹，自古同道相害、文人相轻，幼吾幼以及人之幼的博爱终究比不过小圈内化

我想起了《妙先生》里的一句话，信仰不能拯救任何人，是你选择什么信仰拯救自己；技术大概不能拯救那些小白吧，因为他们的信仰，是靠把一切的责任和赞美交给被神化的「大佬」而灭绝所有自信和生长欲，这样吧


当然，看看目前各大教学平台动辄1小时的“超细讲解”录屏、两三小知识区up的无源码、流水帐讲解我就明白了，原来是大家对位图上数据的变化并没有深刻的认知，只是在复刻他人特定语言、特定平台的贪吃蛇实现，就像CSDN和博客园的码农互抄。

唯一我非常欣赏的动画讲解，代码风格不明确，至少不适合初学者；算法入门后没有自己的思考，也难怪小小一个贪吃蛇，成了所谓大佬小白的分水岭

我很羡慕那些人信手掂俫动画讲解，它是没有复制到B站，自称原创嫌疑的，当然我也不是做不到，还没计划；

但也不是视频越酷越易理解，最简单的示例，反而能让人对看似复杂的程序，有个系统的认知。

当时如果听说身边有人做出来了，也的确觉得很牛逼啊；他们的游戏，基于特定数据与判定结构，而今天，你能在网页、命令行、触摸屏下玩贪吃蛇，这有什么难吗？给我五分钟，你会发现这难度，只是含糊其辞带来的

这里感谢下 [Milo Yip](https://www.zhihu.com/question/360814879/answer/1013986215) ，虽然二维数组本质，是普通数组 以列长m分块，是C语言结构与指针入门内容；但他很好的混合了单格子索引与 RingBuffer 环形空索引复用队列，我也是在阅读他的回答后，写了我的第一个贪吃蛇程序，那时也是仔细一行行抄的，不过我第二遍就已经外提出许多函数。你打不打算立刻动工自己的第一次呢？

