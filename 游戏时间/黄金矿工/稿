黄金矿工是大家小时候都玩过的 Flash 游戏，咱用十分钟的时间复刻了 HTML5 版本，整个导览一下哦

这个视频是放在「参动之画」还是「游戏时间」，我考虑过，虽然它的计算很单一；但除了钩子晃动，地图生成、碰撞检测和素材音效不是绘制的技术，还是算2D游戏吧

它的灵魂是一条线，线的 p0 在x向中点处不动，p1 是在某角度区间里摆动的，有方向r、有长度l，这是一个向量，但我们只修改rl做动画、靠p1 进行碰撞检测，不展开讲向量

r 的区间是 90度和 *90度，即270度

摆动是指只有一次吗？其实如果按百分比，它是在 0%~100% 即 t 0~1.0 间往返，正向一次反(即负)向一次，重复无限次

你应该注意到据时间位置t 的变化，r区间 r0~r1 当时值 r r0 (r1-r0)*t ，也就是说变的只是它俩之间距离的部分，这也是补间(tween)的基础

细心的人肯定也会注意到钩子的摆动速度越靠边角是越慢的，就是咱的缓动(easing)曲线。t是某 ease 函数的x，那如果有宽,高两个动画同时播放，只要知道各自的 v0 和 l(v1-v0) 再给它们同一个t v[i] v0[i] ease[i](t) l[i] , 比如下面两个 v0 是从宽高鼠标xy，扩大到全屏的动画，横向较快

现在咱有了一个能不断左右摆动的线

你可能注意到钩的 l 和 r 动画性质类似，只不过它只往复播放1次，而且如果碰到了大小n的金块，立刻以n反比速度反向播放，即收回

我们刚刚通过 setInterval 周期任务制作了摆动，就是 t>1;d -d; t<0; d 两边检测，如果再加个 n ，每次碰到1.0 n--; 没有了就停似乎很容易

在玩网络游戏网卡时，你会看到后面的队友一下窜到前面去了，单机游戏也是一样，这是物体的速度都乘上了一个帧时差 dT, 时长久距离大, 游戏中数学、物理、光学的计算都是要花不定长时间的，可能极端情况你维护的 t 在这帧是弹了两圈才回来(可以 t%1 取余去算)

刚才的方法不太适合于游戏帧刷新,游戏会独占任务调度,阻止周期任务定期执行,这个方法算t不会掉帧,会卡帧.

那有大佬要说了，不如把晃钩,伸钩的动画存储成起点 T0, 靠 requestAnimationFrame 拿当前时间再用余数算周期位置

停停停，程序员要灵活用眼，发扬「拿来主义」，直接用 CSS 动画 r `2.7s ease infinite alternate`, l `2s linear` 不行吗？但 CSS 动画 @keyframes 和 e.animate 都是不把当时值暴露给 JS 的，但 SVG animVal 可以

现在实现下空格/下方向的事件，我们引入个 runs 名词(-1,0,1)代表动画方向和播放/暂停，播放 l 动画
完成后先就反向；稍后我们在碰撞时重设其时长并反向 (也可让动画点 t 0.5)

那个卖钱、用炸药没有他讲的那么夸张，都是娱乐效果啊；无论是拖是卖是炸都是指钩上的元素，碰撞上时我们记住它的ID，然后可以根据其 attr("l") 大小算拖速、也可以炸掉和 remove() 它，而不是每次去取最近元素把矿工本人或者摆钩给炸掉了

他这个对 Unity 平台的利用主要在碰撞检测和向量速度，物理重力是不是都关掉了。所以我们做游戏的其实不是很分引擎，老实说我开始还以为是 Flash+ActionScript

四项
1.黄金矿工的钩子是能朝水平方向伸出的吗？所以两边 -rCorner 如15度
2.钩子的最大长度是常数吗？算一下三角函数(立直角三角形,沟谷弦)，啊不勾股定理；其实还是弦长，当r在p0和左边点,左上点角度差范围内是 tan(r)*h 到 (w/2,h) 是 (w/2)/sin(r) 从股求弦啊，这个计算我封装好了看看
sin<1 ，它是 锐角r对的股/弦 ， (1/2)*2 是1吧， 1/(1/2) 是 2 吧
3.你钓鱼时不安钩吗？钩子末端有一个角度和钩线一致的正方形(怎么想到这个树)，当然也可以是其它图像但它们都可以是包在矩形框里
4.伸钩时线还会摆吗？这里咱用外部动画取值的好处就显现了，动画上有个 runs 真假值，每次下钩播放l动画、暂停r动画

再加个土棕色渐变背景，有内味了

其实在几年前我们是不能从 JS 侧利用 CSS animation 的，因为那时没有 Houdini 对 CSS computedStyleMap 即时值的暴露 ，但能用 SVG animVal
SVG 里把 style 属性对应到 animate 标签上, 有 v0,v1,dur,v 四个基本名词，当每帧绘制时 p1.r 钩旋.v ，但现在我们只需用纯 JS 不创建SVG标签就可以实现

再来看看每关的地图生成，这个不要指望有人把黄金放好了给你钓，随机更多游戏也更不枯燥些。

对比一下这两张地图

首先这些东西的总和肯定是在十几个-5 的范围浮动的，就是说选这么多随机点去放东西，有 n1~5 的黄金块、钻石、石头，还有神秘妙妙工具(大力水,能立刻回钩的火药)。

钻石出现的概率肯定远比黄金小，但这些的概率总和 是1，那我就对地图、黄金大小、神秘袋概率打个表，随机相关内容请看地图生成那期

黄金()
石头
金
金1
金,5
钻石
神秘袋(火药)
秘袋(大力)
秘袋(谢谢惠顾)

所以你看，游戏不过是规则和变数的组合，关卡就是生成器配置的序列

那没有素材(矢量图/动画)这些暂时都用方框代替吧(HTML侧既有, canvas 侧可绘制就框架暂00~wh,w0~0h画咯)，音效也先做成左下弹框形式

不过不管怎么弄它，都要有办法判断哪个东西和钓钩碰撞了，再找一次 CSS..的大哥DOM, 其实最聪明的方法是把线伸长成直线取相交元素最近的(closest)，算钩到的时长，DOM 提供了 elementFromPoint 方法，隔 0.1 秒检测一次当前 p1 下元素如不是画布，就拖它了(每帧位置变一次,再有动画结束时 删它,加分)

来耍耍咱搭好的骨架。阴间配色

那么咱把 UI ，还有其逻辑整理下，首先通关是由捕获统计的，所以加分时顺便更新这计数 Grouping
然后矿工只有空闲和上下钩三个动画，在空格键、碰撞、算分三个事件时切换，钩,得分时有音效

靠CSS的好处又有两个，加分框可以用内边距动画，分数数值的渐变也能用 CSS, 美麻了

animProp(o,k)anim(700,[o[k]],v1,c o[k] c.v)

最后来做一下关卡间的交互，普通 DOM 应用嘛，点选扣分，幸运交到下一关概率表预启用

这里涉及一个道具的高层建模，大力是时效的，炸药是可多个的，嗯有(名字,图标,价格,个数,失效期) 这些个通用, 然后有动词 {使用,当失效}
实际UI更新时就可以利用到名图个数，炸药使用时播放爆炸,删掉钩中元素立刻回钩,然后立即失效移除; 大力给拉回时间设个反比，比如2吧,失效时乘2

1.其实后面石块也有三档，你怎么改
2.后面的关卡也有不断横跑的小猪，怎么加

再教大家一个技巧哈，这样的定格黑幕动画怎么做；这样的函数.. 其实把 dt (每秒100帧)参数化调长点就对了

好的那么咱来看看怎么让它和原版媲美——添加画音资源

本来我是打算借此机会做个鬼畜的，但为了扩张大家的技能就正经解包原版资源填上了，家人们求保护……

金子的旋转角度有很多种，贴图(svg动图)也有几个，但 CSS class 一样所以碰撞逻辑OK的,嗯
渲染地图时据大小 pick 一个素材,随意设置个角度

石头、钻石、秘袋的随机贴图可以少备几个

矿工状态更新时设置真实gif资源ID、背景从单一渐变变成路径叠加的土层贴图

添加声音的 URL 资源: 开场结束,上下钩,碰钩,得分, 爆炸,大力

刚才十分钟咱从游戏循环、事件流程谈到了关卡和画音引用，你学会了吗？喜欢记得关注我呦


彩蛋

这次的蛋可以让生蛋变成荷包蛋(两只老虎,额

morph, 路径形变, 是一个较有趣的渐变效果

你可能觉得刚才的动画相当复杂，那咱先从一条直线开始，它有两个点 x1,y1 x2,y2

咱用 anim(dur,v01s) 的手动JS实现对两个状态的这两点进行补间, 时间位置t ；可以看见两个点平滑的升降了，假如x方向有变 想也一样

你会发现这个方法也能补间三次方贝兹, 毕竟它也是两个点

来扩充咱的新问题，第二条曲线是一个三点折线，刚刚的旧新状态对应就没了，中间那点对应哪点？你是只对应长度最小者，或从两边分配都不对。正确的方法是两条线都有三个点，这样就能平滑移动了

咱知道每条线段得分成 (3-2)/2 的长度比 kl，可问题是，怎么给直线切成小段？这你就要看[点计算]这期了

算出它与下点的角度，然后固定步长 l*kl，连线 l/kl 次，其终点就是下点

推而广之，把整条路径切成数量一致的点，再进行填充 fill 或描边 stroke，就能实现这样的动画: Titter->Fbook

通过傅立叶变换处理路径也可以得到这样的点集，以后有机会再讲
