缩小放大模糊 滑移
morph&弹簧,粒子连线干涉力 思维树 js截图
面向物 封继多 连接历史
BadA rgp

色盲原理  组合更强 Mapp flv,alo,毕设

甲程序员、乙前端、丙教你学编程 教你毕设面试、丁大神，那我为啥就叫『咱动苏』这么土，又和编程无关的名字呢？
4年来我一直执着于「程序」本身，生成变化的数据，很有用。世界上哪有「语言」不可描述「数值」不可计量的东西，以至于编程对我来说不是饭碗、不是爱好，正是生活啊。

许多人爱说自己对代码有洁癖，毕竟团队招人时不爱招码风混乱的人，那么我的洁癖是什么？我没有，因为应用和算法都有很多种，我所做的就是穷尽语言的表达力，梳理程序的灵魂，尽量让它们的数据结构融入程序结构，让语义融入变量名字。
表达「优雅性」只在于流动的程序，静态的程序、程序的文本形式，多符合能被自动整理的排版规范，在我眼中只是「合规性」

当几十次重生里一切闪耀的技巧，像普通的水泥一样融入一段代码，这结果不但不显其「聪明」，反而像最朴素的石块融在一起，浑然天成，因为一切本该如此灵活而简明。这就是「道」，这就是所谓的「大智若愚」，对一个程序是这样，对人呢。

在洗濯世间浮华后，极简是我的选择，也是mdy、程光剑的选择

而那些只把编程当作实现两三个目的的工具，以博士、自主可控、大厂、行数多、人多工期长，作评判技术水平唯一标准，不分析代码「必要性」的人，不会认识到「道」的价值，因为他们眼里只有“我怎么流行、怎么聪明、怎样符合规范，我比你牛”

大家就职都是为了更好的生活，难道生活与技术偏好，和所谓的有多牛逼有多菜相干吗？不相干的。

和傲慢与否更没关系。技术水准和人品，你看看就好。
当一个时时被初学者的建议、不同的入门课程启发的人，丢脸吗？真香。

不要拿人开玩笑，再小众他也是人。无论是计算机、IT还是什么领域，尊重别人的人格、尊重别人的追求，不要对自己不了解的东西指点江山，开发者费时费力学习如何利用C语言API，一个命令行用户随口一提「深入了解内核的使用」，内核不正是为了用户无需考虑操作系统和硬件的不同而存在的，如此轻松就深入了啊、刚上手就能罗列了啊？

我真的搞不懂速成精通这些词。

他们饿了，为什么不喝肉汤呢？
呀我怕面试没人要了，赶快精通下Linux「内核」

不是，你一行C代码没写过，一个二进制读写没做过，从没买过100块以下的嵌入式设备，哪里来的底气说「内核」说「精通」

承认自己永远无法获得全部，才不会被开个「看得见」的网站这样的成就阻挡脚步

想起一句话：知其变，守其恒，为天下式
只知变化，只知接受，或者干脆放弃接受，看不到不同输入间存在的「更大的东西」，
以「机敏」论胜负的人，为了这两三字，放弃了许多更有价值的东西。

所以有纯粹的愚钝吗，只有选择和尊重。

我开发正是为了脚不沾泥涉足流行的长代码，终有一天我会给这些「后端」技术，一个自己的定义

自尊对每个人都很重要，每个人都觉得自己是独一无二里最高的，但只有为技术抛弃自尊，才能看到它真正的样子，因为，它的世界太纯粹，只有一个个动作和物理量，理解不了那些你高我低

从不认为自己比人低，这样的心态，才叫「自尊」；不自尊的人，看谁都是傲慢的

在有傲气的人眼里，什么样的人都可以是傲慢的、想蹭自己便宜的；一个热爱技术的人，是舍不得把这些人造的高低上下强加在它身上的

傲慢不是「自我承认」， 而是不听取别人的评价，不看见自己领域水深处，国内外真正的牛人，一边装作努力收集书单，不想前进，却觉得前进的人都不切实际、傲慢透顶

功率≠人数*时间
功率=有用功/总功

码力≠行数*项目管理*求和(框架用法流行度)
码力=有效码/总码*性能*灵活性

耗时≠(人数*时间)/工作量
耗时=效率/工作量*返工次数

知识≠书架上有多少书
知识=书本*网络博客*自我思考*利用率

为什么号称名校毕业的一些人
就不明白这些初中物理呢
别人都在这么做，很难不随从吧。

为什么号称精通编程的人
就不明白小学语文呢
学了「高等」的，忘了编程的本心

为什么外企不996但产品质量好呢。
他们愚钝「不会数学」，但是明白这个中国小学生都懂的东西。

欢迎关注我的B站 咱动苏，我可能不会提供什么微信公众号、网盘分享、交流娱乐群，但流行与否，有趣与否，你都能在这里看到。

程序语言对我来说不仅是可替换的工具，更是我的母语。

语言简洁干练、涉猎广泛，这是我的风格


最深刻的东西往往不值钱，不太赚钱的必要细节可能有点难度，相对赚钱的是靠创意再复制代码拼出来，最赚钱的东西代码上都是千篇一律、鱼龙混杂
代码如何真的对用户没丝毫影响，你所做的只有证明自己很优秀。懂了这个道理后我才明白自己到底选择的是什么，这些东西不能用流量去判断价值，要看源码看效果，不能看有多少人喝彩
想通了才明白这只是选择，我们其实并没有失去什么，也并不可怜。

破除「智商」的迷信，对技术的信仰才是优秀的唯一标准

一堆东西变成一个东西。更广大的东西，功能更普遍适用，用户有更多选择
对于统一的模型，自然支持更多格式和操作的兼容；对程序，支持平台api和修订的兼容

在eav基础上编辑器 导入出 校验，操作具名命令化

明明可以用同步文件夹、批量导入导出配置数据，舍近求远以某种格式http给后端，等待其它同客户机下载合并呢
