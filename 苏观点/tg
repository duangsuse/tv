身份ID验证无论设计用户系统还是外帐号绑定(可能靠WebHook) 都需要，在一些小网站或单机上只需输昵称就能保存设置，我还能自称雷军呢！可要防伪造，“密码”性质的东西首先得长、每位情况要多，而且不可枚举或爬取；如视频网站，UID被“视频、评论”所引用，就需要帐号+密码两部分供 makeVideo(uid,tilte) 等校验限制，但明文发送密码就无语(数据库内密码也该靠相等hash)；往往以UID-“临时令牌”保证UID是本人，令牌(指向可信数据)由密码等验证方式签发，下例中服务重启时吊销。总之会话『验证』是指对每次请求都可取「可信」身份。被百度使用的 Session-Cookie有个全局 Tok-UID表，而JWT 利用密码学签发UID-私钥的限时令牌，利于分布式；至于2fa、限期换密码、单次密码 啥的就有点杂了，但都是靠服务端临时存储或密码学

举个例子，验证码提供方会生成图片和其临时ID(即cookie"饼干屑")，只有还原出ID-图内文字才继续流程；OAuth等同样是临时ID存储取代每次收密码


四种排序文字动画、.got.plt动态链接hook、曼德博集与隐函数绘制、正余弦-心电图动画、S表达式转思维导图、BIOS汇编API+C链接

因为想学『编程语言』而离开的这段时间我一直在努力搞懂解析器和AST、范式与技巧、浏览器API，追寻程序和数据间的等价关系、追求与之俱来的表达优雅性，我正视之前的历史如GeekApk.. 正是从那时我感到心有余力不足，当然它是可实现的，只是尚需我写几个框架

所谓「元编程」，正是从你开始了解class,new 这些语言结构都能拆成啥，有啥可修改开始的。元编程就是编程，只是自语言成为你的语言，编程就不再只是从惯用法堆积，总能以技巧避免冗长重复的代码、让等价变形破除对道听“规范”的迷信；而当推倒再来的重构达到一定次数，就能从整个软件的活流程与死结构中看到「更大的东西」——那些最常用的动作与参数、低频但不可少的东西；历经洗礼变形却仍未破败的宝珠，值得我们用最大的精力和创新去优化。

现在去IDE化等因素确实不利我创建“大型”“实用”项目，但同时 JS,Py 等语言暴露的领域基本操作和REPL草稿工具也利于我重复实现些语法/结构复杂的东西；同时项目式管理也不过是细节过度的文字模板，一味强调自身体系的宏大性、仅提供片面多冗余的示例，甚至丢弃了GNU-make时代的简写灵活性


就像17年说的，我会始终坚持开源精神 求知若愚。有我懂一颗螺丝，就有你们的一颗螺丝。
但现在我知道菜确实是原罪，但那些清醒并正在自我救赎的人，都摆脱了大环境的恶和人性的惰。对技术人始终待人和善

当然啦，以后我讲一种流程可能不会细到具体API名动词，因为需要的人毕竟是少数；更多是以领域输入输出、动作-状态、流向-数据分片 等概括法和链接、搜索词 去写些工程小科普

现在时序,设计模式,class结构元编程 已经因Range和举短例模拟,函数式,JS等动态类定义 不成问题；我也不再是需要逐括号背代码仍易语法或API错误的人了——设计只在脑内进行、组合与复用平平无奇。如果它难看散乱，就把它封装得好看点；因为语言既有层次和语义 也有易读性啊。有自信完全理解了编程语言结构和系统进程级流程的人，才敢于用自己的想法和语序实现一切，走过五年，我很想回来多写点应用。

计算机科学实在是太多了，我只能收集有趣而不太难的部分科普(几何绘制都有十几种混成模式...虚拟机也有几十条指令，不举用例不排序归类等于白讲，这些东西对实际编程是潜移默化的，因为你始终需要自己动手灵感或翻阅)
泛滥框架而非通用理念、API和套版代码，冗长的 ret= return ret 这种命名狂魔，把核心与私货(如Map/HashMap,HashTable..)混为一谈，看到 Kotlin 等语言的趋势、Py 的火也容易发现是与编程目的相悖的。我的分享不是为它们，最终是想打破这些无关思想的文字游戏
实际上JQuery那种工程，我也只能说是有它的选择，没有高低上下；因为想最优雅地完成编程目的，即便不考虑用法兼容，只有融合许多东西的优点才可，没有优点是低贱的。

说话就是编程，只是没有细到数据类型、程序基元的程度，如果能把所需最小API也视作基元，编程就有了系统性，并非从示例拼缀堆砌。若站在平台作者同一层次思考，而不是被动记住他人对问题的理解，能找到属于自己的语序和详略度。
说到底元编程与编程、各编程语言、人与计算机语言间的区别本就不存在，只是因为繁杂性；如果语言的美能战胜繁琐、涵盖繁琐，相信就有一个更统一、易用的系统能出现吧。

去除文件的所有空格 (echo `cat a`|sed 's/ //g' >a)，若扯到 File read write 乃至 byte[] buf 和 Stream,Charset 就能写10+行，如果说 File("a.txt").pipe{it.replace(" ","")}.out() 就会看出很多可参数，各人各时期会有选择，但若你经常用、改配置，每次写全是不可取的，为性能也不行。
定期截图网页可用 DevTools 协议(CDP)，完整周期 最后 data:base64 发回 png，再由/etc/crontab 执行 $URL/`date -I`.png ，如果只见框架名词反而会更难

『编码』易和字符编码混淆，编程时并非拼凑代码、单靠重试调试print，而是用心想象程序执行的常规与边角，某语言代码只是程序的形式，程序不是由行构成的。

程序即思维，编程即表达(编程=表达思维)；代码不是程序的唯一形式，但就像思考时也离不开中英文，这分离没有意义，却能让你理解元编程的实质。如果眼中只有代码和执行结果，不能明白『程序』语言的意义，来优化编程表达、构筑框架

第一句我摘抄的… 为啥我没aa即bb的表达习惯啊，听起来好牛的样子。其实是我习惯了以某用途取代定义，思维的表达不唯一，程序的代码不唯一；听起来很扯，因为很少人会在 It works 的情况下重来吧。不少人把重试得少定义为“聪明”，但你也不是一遍过啊，为什么认识不到时间-功率不是线性上涨呢

分享我编程的三个观念

程序与数据对仗、数据与数据等效
用法先于定义、命名胜过文档
自己实现技巧先于理解他人平台。大的从小处看，小的应能概况领域

输出彩字JSON
对"",Num,Bool,null 直接写缩进+彩色文本区间(span)
对{}[]内每项以缩进+1 继续

对单项得span文本
对{}[]内项重写为缩进+("k":+) 继续(缩进+1)，末项尾+=上一层缩进 给} 换行。

在生成序列时是write拼接还是每层 ""+"" 无谓，只有输出嵌套结构才需返回值指定；求值是只依赖子树的值再计算的，所以叫止常量深先重写。1+2*3= 1 23* + 这些才有算法图论里的前中后序遍历

因为对『编程语言』感兴趣关注我的人，感谢你们的兴趣。尽管我还没经历太多实验，在这里我给你较完整的词典：
>ps. 我一直认为好的代码是横着写的，但密集到这个程度也很可怕吧…… 毕竟是因为内容本身就广啊

从理论上密码学质数分解就是牢不可破的，但其实啊，不是社会的所有东西都能用技术解释；相信的衡量标杆不要太绝对，最终目的也是美好生活

宏=宏大的代称。以短实现大，一般指像PHP始于小问题的预处理/录制回放语言。此名词太含糊
元=基础的成分。如元素、基元、元循环；往往不可再分
幺=音yao,单一/single/nano
元编程=重写算符语义、利用执行前结构信息(如序列化器,待注入成员,IPC函数)的编程。因框架概念和行复制泛滥，以及对列表操作的不熟练，变成需额外学的东西
列表操作=流操作=文档数据库=映射map 过滤filter,first 排序sort 组合zip,flat,chunked(paged),groupBy.. 归纳reduce,join,all,any..
SQL=抽象点的Excel列表过滤。如 N:N 关系(无属从1:N) SELECT a,b,time from user_follow where b IN (SELECT id from user where name="某")
绑定=让领域概念(SQL,XML,DOM,Widget..)对语言更易访问和区分
代码生成=输出到src/buildDir 以合规的文本/二进制结构
主循环=消息循环=任何不是(询问并)执行完就退出的软件都需要响应交互，如UI、httpd、pygame游戏，这时由事件-效应器 构成产销队列会利于UI重绘等代码复用或多线程，是种阻塞poll队列；而消息队列会处理重试、死信记录
依赖注入=通过构造器、属性(注入点) 按类型乃至所处模块隐式提供某值，例如各种数据库,JSON,Zip,上传下载 工具的配置.. 框架对用户对象基本先用注入器，无论动态静态类型语言
注解=Annotation=JDK术语，@interface ，可以保存些编译期数据并作为APT 的标记，如 @Override 来进行些额外检查、代码生成。Java里乱眼是因起名太长、使用过度频繁(无默认值式设计 烂大街)，仅使用单个不影响APT预处理能力
事件=主循环能访问到的函数值，用于灵活扩展(如+网络API调用进度)。 HTML-DOM 支持冒泡(父元素代处理)和捕获(反向冒泡)，多框架上都可理解为待调用函数列表。
回调=扩展函数功能的参数。函数值，单次调用现称 Promise 或 Future，其参返类型比在哪方代码调用多少次重要！如forEach(x=>) 替代 Iterator, map(u=>u.name) 替代 List b;for(x:a)
await=协程=断续函数=yield Then(fn) 式函数待fn被调用则恢复， awaiter 调度器执行 next() 到的任务并在结果时交给 z 恢复，所以await只能在断续(yield)函数里使用。z=asyFn();2==z.next(1/*==yield 2*/) .协程间上下级(非对称协程)利于分步任务
grid=横纵方向个数手动的flex，对行排版的补充。靠换行对齐与溢出/浮动排版基本写 nav-main-footer ,3列布局都要大量的宽高计算；利用 template- rows columns:repeat(3,33%) 及 gap,grow,dense 等参数就切分好一个大区域，也支持 align/justify。
响应式=基于@media 判断改布局网格来兼容resize， viewport 和 2x pixrate 等就是这边的术语；此外 % rem 取代px、box-sizing:border 也常用
异常=SEH=非局部return。try catch-throw finally 块(尝试接迎抛下皆有)，finally=trycatch内皆有，Py throw=raise Rb begin rescue ensure JVM线程可设默认捕获；非RuntimeExc异常在Java是调用即检查的。throw=带错误JSON直跳回最近的catch
类型推导=类和函数可以基于<T,R>等特定类型定义如 List<E>，型参默认无extends 限制，即只有各位置(get,set,T->R..)唯一性。泛型推导是对含参类型内参的归一，如 <AB>f(b:Box<A>,op:A->B):B=op(b.x) 对 f(Box(1),Int->Str):Str 各处AB有交集且其符合API。运行期JVM只能在元数据拿到型参实际class(泛型擦除)。
型变性=子类型兼容/out-in extends-super PECS(Producer-E,Consumer-S) 原则即 Func<in A, in B, out R>,Func<?super A,?extends R> 。out只在get，in类型只在set位置，这样定义 Get<Number> 就兼容其 Get<Int> Get<Long> 实现.. 而 Assign<Int> 反向。
ClassLoader=在首次用到类(static成员,方法调用..)时按带包名、Listener$内部类 的全称类型名(qualified TypeID)获取其byte[] .class文件定义，否则NoDefFound，系统级是找CLASSPATH；最少有隔离不同框架代码插件、reflect.Proxy 动态成员实现
invokedynamic=(lang.invoke 即旧dyn/mh)=你可以实现JS的 f.call(this,arg) 如调用被覆写的方法，对JRuby,Groovy,Jython很友好，轻量级反射如 MethodHandles.zero(int.class)()==0 以函数组织出脚本语法(利用unreflect优化)。
Lambda实现为this被metafactory转化为目标SAM interface代理的“动态脱糖”，其内"CallSite"调用点，建议用新动态this invoke指令实现（不过说实话咋实现和应用层有关吗.. 就是它等于匿名子类也仍不如Kt有格局啊
外提 static MethodType,VarHandle 如 lookup().findStaticGetter(System.class,"in",InputStream.class)。话说 List.of, Map.size,int[].length,Console 啥的，字段很少了...我的Java6丢了
「编程」语言=以祈使句无助词 语气词、不以感情滥造同义词、严格区分数据类型和相应命名与语法、条理范围明显 的人类语言；也存在简洁与啰嗦、易读与冷酷、通泛与刻板，有易改变(工程化:可扩展)、多态(同名不同义)特质。
中文编程=合适编程的中文子集以合适中文的语法排版+合适现代的i18n。
符号执行=不以「值」为目的的程序(树,栈..)变换，比如本来 (Op "+" 1 1)=2 ，但也可以 1+1="(1+1)" ，或 a*pow(n,2)=a<<n 、n+2*3=n+6

编程语言=由(顺序|情况|重复)形式化字串的规范+stdAPI
解析器=从字符流收集出嵌套、逗号列表、算符链-单项后缀 栈、能划分"",/**/123等词条区间 的工具
解释器=深先树重写(后序遍历)求值器+解析器+嵌套作用域，计算器和实机CPU也可称
提一句。如果你会 '1', "+3*2".split() 的计算器(等于UI打键的自动版)和命令行 echo 1 2; ls . 这种的，解释器就是把命令行“嵌套”化了，比如 if(Expr){Stmt;} ，Stmt=if|for...|Expr ，难点在于从前缀读取{}()到列表，很多人只会split 甚至找()开闭位置去substr，其实递归下降是不需要立刻知道闭括号}在哪，它读完内项列表确认尾部有} 就够了；此外+-*/的算符优先级与 .k (x,x1) [] 这单项后缀 受BNF冗杂的影响很多人不会写(正确做法逆波兰,用递归只1行)，最后先有值、语法规范再有虚拟机啥的，以及 Java,C 少数 int x; int x(){} 后缀确定语义(非Kt val/fun)、跳空白注释(加过滤流OK) 这些递归下降时较麻烦
如果已会，建议是 (a (b c)) 的语法 P=(word|(P))* 甚至 P=(word|'('P )~')' 而非 P1=word|(P1*) ; P=P1* （这么说挺傻，我再举） 1-2-3 的语法 P=num(-num)* 而非 P=num|(num-P) 即 P=num (-P)? ，即尽量少预判

REPL=读取并执行1语句，应是配合解析器读 从而可在之间换行；应需C-readline,node-repl,py-cmd 等stdin单字回应(tca VTIME,VMIN, win _getch)的行编辑，以支持按Tab补齐事件
算法=realloc数组,x:(xs/Nil)链表/双向,list KV表,hash桶KV表,DFS路径搜索(必靠链表=栈=新点先走),BFS可达搜索,Trie前缀搜索树-Radix字节前缀/AC失败转同前缀/KMP单子串AC=strstr=indexOf/编号K-V表,排序和二分查找 BST二分树,较子项最大/小堆树:平铺N叉树,Skip链表/malloc空闲链表,动态规划(可缓存递归),p-q关联集/带权重合并,贪心法与O(N)等复杂度,..
递归=利用调用栈扩张问题集再求解(回溯)，递推=尾递归=循环=未扩张问题集，只修改了变量
实用算法=不要过度区分解读函数值(带参代码块)、元编程简写设计、JS防抖和节流(debounce,throttle)=限调用取代或响应频率，冲突只留新/旧次参数
t-t0>dt: 保留旧次(无末次) setTimeout: 新次(防抖/独占时间片), 或dt内没调用过才调用(防抖留旧)
实现可把 eval,show 等操作放ASTNode外的对象Eval,Show里：用重载+覆写Node.visBy(Visitor模式)，方便操作间隔离
嵌套作用域=动态域=内层{}变量对外不可见。规范C支持覆盖for(i)for(i)无冲突。实现调用,let-vars-in语法
实现法有 eval(t.copy()+)、Map+Stack<Map> 、 Map<List ; List<Map

函数=涵盖几个量变化的量，由算式得出(函数式语言)；些许参数1个返回值的代码块，占局部存储区(子程序栈帧)，由计算过程指派调用结果(过程式)
函数值=闭包值，不止需C函数代码指针，如 (a=>()=> a) (1)。
求值序=收束表达式为值的时机。如调用里传名传表达式 by-name(Lazy) by-expr(inline) 仅首次求值,直接展开-宏(实际上都要调用方的变量闭包) 和 && || 的(惰性)短路计算；PHP不能 iff(a==1,echo A,echo B) 仅得A但老语言可以
词法作用域=支持闭包的动态域。一个变量有其运行期绑定"&Binding"而非“局部表”，如上i级函数j号局部量(含参数)、全局名key
闭包=内存对象。包住了上级局部量的代码块，其局部量=this变量。JS/Lua函数、Java匿名类实例 都相当于闭包
实现可全复制 t.copy ，或分配 kotlin.IntRef 等空间:指向栈上/保留栈量 (Lua同,op_closure getupval~close)
状态机=NFA->DFA 啦都是手动更新状态的(而非指令 pc++即iptr++) 有限状态号:单步转移 自动机，投喂1字可能前进1步直到末态ret。闭包+iptr 可以让子程序暂停在某一步，或者用TS的switch case123实现for(;;)等结构喽
(但JS无goto,if while跳转都得内switch)，或者用CPS面向调用-尾步骤编程。表达式内yield还要外提左变量如 if(1+yield 0)a; 变 v=1; st++;ret 0; case 2: if(v+_next)a ；for(;precond;tail)等还要展开

编程=以语言提供的基础数据类型和流控/定义结构，和平台+库API与事件，按所需信息量 组合出程序，实现目标
程序=数值结构与流控。数据值/变量暂存位和判断流程的文本、(语言虚拟机)二进制形式，通过暴露函数名等进行N到1链接
编译=把调用变量、重载(+-数值宽)等语义引用固定、转化掉括号和字串内插和new等顺序流程。生成紧凑文件，避免可静态项重复查找(解释器开销)
编译器=输入语言格式+前端解析器+前端填命名重载,跳转地址+中端优化+后端指令选择寄存器分配+目标虚拟机 或编译单元链接+ELF/PE等代码格式+实机GNU/MinGW Crt运行时,ld
多线程=并行=通过pthread等下层要求内核多CPU调度，会弄坏libc用了全局变量的函数。可利用Mutex(单入锁),Sem(等待计数),Atomic_incAndGet(乐观并发)等基元防止竞争修改出错。即便只有单核也能靠时间片抢占多线程，但只会更慢吧(指Python GIL)
Base64=Eqv<Str“A-Za-z0-9+/=”,Bytes> 3/4的字节存储效率，二进制位的把戏。 公倍数lcm(log2 64,log2 8)=lcm(6,3)=24 ，即(24/6=4)AZ:(3)Byte；简单说把Bytes=8位连起来再按6位分块对应到AZ(=Radix64)后，若末字符不够8位补1~2个'='(如6+2b"a"->"YQ==")；反时串联低6位。一般用预保留低(8%6=2)位 换给右byte 高2位，然后输出内几个6位的做法，可按4,8字节为一次操作。可不移掉2位若i%(8/2)==0,即尾部2字节2+16位凑整，否则留2位,尾== 会多余1字节
请勿滥用Base64，文本文件也可内嵌二进制，只要临时越过字符集编码。也有 %2 /2 (即>>1) 硬核toString(2)，当然也有1次2,3字符表的优化法。
Base64=64进制多字节。3/4字节表达效率，即串联8位字节并按6位(6=log2 64)分块解释从而避免乱码。把1字节视为6+2位，6位对应Radix64=AZaz09+/，2位移到右侧并再>>2；第3次正好凑满6位=1字；若n*8%6==2,4 则添上冗余尾缀 ==,= 。可一次操作4,8字节，解码拼合 6*5=32位；亦有 Base32/16/2,URL-Safe 等变体，base16 及其 4a:be:cc.. 的形式在各种通信和密码上常见
XML=EAV结构，tag attr=v child 和内文(纯文本节点们)构成的树结构，无child的tag不需斜杠如 <br/> ，而 <div/> 则是无效的，勿滥用XML容错而 &amp; amp,lt,gt等字符ID转义在早期PHP里用于避免用户注入JS脚本；XML比 JSON,YAML 仅易写「子项」概念
SQL注入=JS注入:XSS=由于把SQL语句、HTML排版模板当作字符串与用户输入拼接，导致用户文本变为代码的漏洞。旧时PHP等“预处理模板语言”(字符串语言)常见。任何注入的可能均是编程错误!
HTTP= Get,Post,Put,.. URL (参数)带 Header-Cookie存储,Body-ContentType 的文本协议，HTTP/2 SSL 性能提高，它还支持身份验证和 Multipart 上传 octect-stream 下载 keepalive 通知(短期版WebSocket)，只是SOAP等魔怔协议的时代人基本只用它传参
Server((req,res)=>).listen(8080)
Socket=套接字=收发线=主机间的字节流,fstream 可用 ss,nc,ip-r 指令调试
UNIX bind&listen accept:sendto/recvfrom..shutdown 客户则 connect
二进制= [Share/c/BPUcal]
Cookie=饼干屑=服务端存储表上的键，它指向的数据是可信、可限期、可无JS由HTTP(请求头内)设置的，可以保存用户名作登录凭证(饼干屑长随机,难暴力破解)，因它代表服务器曾主动为用户生成。
JWT=分布式只需共享公钥，各自靠私钥签名的可信、可限期数据(如用户UUID)。
UUID=分布式，带生成时间随机的唯一ID。ID 在无外引用时等同密码，是可信存储
公私钥=非对称密码=PKI体系=SSL证书、apk签名、HMAC等安全信任所依赖的公开验证方法，公钥可加密但仅私钥可解密，靠解密验证私钥身份。比如篡改文件hash清单 靠私钥才能验证，有 DES,RSA。 安全有对照和重放等攻击
一般的加密算法双方都有密钥，正运算加密，逆运算解密，是平等的
公私钥pair只有公钥能加密、只有私钥能解密，用户就可发布公钥、通过解密证明身份(或主动签名-验证)
说成函数，即知道一个参数和结果，但不能推出另一个参数，且有1参数也能加密
在质数分解里，靠答案出题很简单，所以乘积是公钥、1质数是私钥，N余数上 数据**私钥=数据**公钥 ，但钥必须不同
N=pq L=lcm(p-1,q-1) 从而 gcd(E,L)=1, DE%L=1 that E,D in 1..L
hash=散列函数=文件摘要 如md5,crc,sha ；摘要相等一定相同，HashMap里起到预过滤分组，好比大小超市的商品分类
URL= 协议://路径 或 相对路径 或 //同协议路径 ，路径一般含主机(Host)部分，DNS(域名->IP地址)中 example.org 被称为2级域名，1级是 .org,.com.cn (Java包名倒着来没错)，x.example.org 级深是子域名，网页不允许(CORS Allow-Origin,或提供lib.js)AJAX访问跨域名；但1主机可通过Host:请求头绑定多网站域名
URI= 协议:描述符 ，如P2P种子下载:文件hash
AJAX=客户机查询信息生成网页的一部分，因为网络请求高时延不应阻塞JS线程，叫异步(async)任务。
PJAX=SPA=单页应用地址栏编程 history.push/onpopstate location.hash#，如跨页播放器、浏览计时
PWA=激进Web应用，可以安装到桌面、发送通知/触控、利用ServiceWorker缓存HTTP响应来离线使用；此外还有 OpenGraph 扩展html>head 头图
Stack=技术栈=选好SQL-持久API,HTTP层才有意义，不同层可以有分工、各自内才有水平高下；也是技术圈最热的话题
跨平台=一般指单机应用在多操作系统可用，游戏等会跨桌面/移动，现在 TS/Kotlin MP 也支持跨语言/编译输出 统一API
PointerEvent=现在许多onclick 已经用统一(mousemove/多点触控)对象实现，注意 mouseout 包含子项，mouseenter-leave 不包含；这构成了hover
SVG=矢量图=基于XML的填充描边几何、线路径(交并差)规范，如 svg viewBox=xywh ellipse cx,cy,rx,ry 。可用设计器或程序编写<animate>，其体量>HTML 类似Flash
Vec2=三角函数计算。向量可存储位速旋等需加乘、修改距离l/角度r 及与0~2pi弧度转化 的物理量 [点计算1]
三次贝兹=缓动平滑=贝塞尔曲线=4点 P0~P1 P2~P3 构成可由距离/向量 绘制的曲线，动画里固定 P0=0 P3=1 ，对 t=0~1 [x,y]=anim(p01(t),p23(t))(t) 就是3点(2次方)贝兹函数的图像；次方=线段数，有deCa_前点连线法和点向量-速率法: P0~P1 的速率按路程>50% 加P1~P2 的速率(那是直线!其实两段向量比率 P0~P1%+P0~P2%
碰撞检测=取最近点所属的几何，检测。最近邻算法基于kD-tree 的多维距离特征预划分。
AI补图=waifu2x,javplayer 等像素平滑算法。颜色补间在放大和(线形遮盖黑边,水印..)使用，但它们不能保障锐度、高对比度的边缘；AI放大尤其对手绘有很好效果
自恰性=规则集不自相矛盾，例如数学 a/b=c (b!=0) 分数(不是IE754浮点!)不能单纯视为2项元组，且只有除数不能=0 (c*b=a 若b=0 则a可以是任何数, 若a=0 则仅c,b内含0) ；不双标，更大说有系统性
数学=没有普遍的狭义定义，但 四则变形约束、分层并列表示法(多项式,化学式,等式组..)、统计概率被用于化学、物理等广泛科学领域，几何geometry 也用于各类CAD设计
NP完全=即 P=NP,单个解和所有解难度一样大；如旅行商最短路线、最优子集；比如证明他人证明得正确、正奇数(a,b) ab=大数 后a的所有解(可对最大a因数分解)
线性=\/ 状一条有斜率的直线，若不直则只叫连续。在任何区间kx的梯度(=增y/增x =x系数)都是k，对任何d. 周长=pi*(5+d) 、k. 反比=x/(1+k) 增量相同，所以圈住乒乓球、篮球的圆周长增量同样，直径差也同样
次方=幂(mi4)=抛物线= 0~1 不如 3~4 更上斜，比如 kxx (=k x^2=x kx, 注意不是kkx)，比如有 金币=4银币、银币=4铜币 ，金币银币是4^1，金币铜币是4^2，这log求2,sqrt求4
Peano=自然数=任何数是0或数+1， data Nat=Z|(P1 Nat); one=P1 Z; 即链表或数学集合 表示离散(相对{R}稠密无限可分) 的点；运算上能等价2进制自然数
方程=相等关系-式，分N元N次是因(N!=1)引入不唯一解。 x+1=10 或 10=x 类“复杂”等式只变形(x+1)-1=10-1=9 即x=常数 形式即可(=配对逆运算)；而多次项(+法并列内) a^2=4 引入 a=+2,-2 即|a|=2 的多可能-需验算；多元引入 a+b=3 等不唯一解，如鸡兔同笼 a+b=3; 2a+4b=8 问题靠 a=4-2b; (a)+b=4-1b=3; 移右常数 -1b=3-4; b=1 变形-联系-验算，也可矩阵化用GJ消元求解(线性代数,代数即“元”)
逻辑关系=如定义了(=)的自反性(id,refl x=x, 因有人会弄 1=2 2=4 代f(1)=2)；a+b=b+a ab=ba 对称；a<b b>a 反对称；a<b b<c a<c 传递。 a(b+c)=ab+ac 也算逻辑关系，但 (ab)c=a(bc) 的符号表示规律就不算了。
奇偶=奇奇得奇、偶偶得偶，也常用于二进制校验(看末位&0b1==1)；质数皆奇数(真子集)

向量Vec2{p,pp,neg; l r} 操作(0,0)->(x,y)的箭头，代表加乘取负、长度与角度，以sin/cos 正余弦(r=0~2pi 弧度)设l、勾股定理取l 、atan 取r。如有AB两点， A+(B-A l*=.5) 可取到AB间的点 A+(B-A r+=1pi) 可取到180度的点，游戏中 某点+=帧dt*角度速度 、(B-A).r<30deg 可比散乱的计算方便
点乘(各轴积之和) =0得2向量间垂直 >0则得相近、其绝对值=距离如 (1,0)-(-1,0) 得平行；向量都可norm()为 l=1 向量； 3D中叉乘得到垂直于2者平面的法线向量

这么看我4年学了个寂寞... 排除最开始入门1年就只会抄拼代码
以后更新就会以足量低频 的方式分组，可能不会太关注tg方面的更新了，偶尔有新东西就分享下。

h5shim norm.css BS JQ
context-menu callout
webkit tap highlight 即:active 整体bg


#define W 5
#define L W+20
int x=100*L+1;

优先级高 计算>逻辑>赋值 低

for(i=1;i<7;i++)if(i%3==0)break;
(1..6).takeWhile{it%3!=0}

要求输出 Coffee,Tea,Coca-cola 列表，然后让用户「选」一个再清屏说名字，其中需用到 switch,printf.. 还有更离谱的建议吗?
system("cls") 这种（不兼容 Linux 的 ANSI puts("\x1b[J"); 啊，而且性能误人子弟，非字符动画就不该有 put"1\r2" =>"2" 外的清屏(跟我念 \nrftvb"

Properties()alsoIt{load("wtf")}
v=getEnv("wtf")?:return null

当加载，
答案=既录[其标题] 空则，说"不知答案 自己做"；回。
判其类型，
  单选、多选，对答案，页找它 选中。
  判断，页内项[它是"N" 真假(0、1) ]。
  填空，对答案带编号 里的(x、i)，页内项[i]的值=它。
稍后，页找".next"点击。 “setTimeout(,500) 或忽视(不自动)”

它长得太快了，以至于尚细的树干承担着 颜色繁乱的果子，语言与其用户仍把浅薄的牙慧当成程序的意义，没有聆听程序流的呼唤；许多果实下被迫摆出丑陋惹眼的人工架子，正是因为这树干的孱弱和对API统一的不信、对数量和真实质量的无视、对描述「实用性」的轻视，才使过度设计成为主流

基础是构造系统理解的根本，未必都是领域里知识树的叶子


tg侧边栏的落雪特效: 每.5s/100 移动 P=随机点 随机(雪花,白球) .5s P+随机xy
前几天做的粒子动画实验，隔2状态随机1次 就很合适，可惜点赞不够 我懒得做 [xy,+-雪/白球 透明]；而且雪花咋画呢.. 但tg客户端代码质量真不行，我估计它为这写了一个文件，但其实客户端交互动画挺多的。

Win32 窗口置顶zIndex问题.任务栏开始菜单 都是窗口
Win8+的Band层z序最大，如果想在任务栏上显示UIAccess或注入CreateWInBand /SetWBand (shell32常规是注入?..
ysc发现有key EnableAMAccess (w32kfull.sys活动管理) 后可以使用后者自由提升窗口，key限取一次，SetShellWindow 登录时 pcshell.dll 管理，只能重启explorer.exe hook NtUserAcquirel 获取key ；好奇怪的私有API

窗口置底问题.Win8+ 桌面图标可独立窗口,只要 SendMessage 0x52C 给某窗口，它变成最底；再将 shelldll_DefView 图标下方 WorkerW 隐藏，ffplay --noborder xy=00wh=屏幕宽高 这样的播放器就是动态桌面
ShowWin(,SW_) SetParent(w,w0)
EnumWindows(f(w,argv)) FindWindow(k,fl=0) -Ex(in_w?,next?,k,fl)
SendMessageTimeout(w,k, 3x, dt, fl)

100粉的头图黏合Py PIL生成。为啥不是canvas或OCV或Java? Pillow Image.open/new/resize 和 getpix, Draw(im) 的API想必是熟悉了，这次我们要用100张图片 拼出小宽高的灰度图，流程是：mask.png w h *.png
若mask不存在，求得(x,y,cp) 网格排布 绘制。输出 mask 再编辑
否则，对 a=mask (x,y,resize(1,1)lum亮度) 和 b=cycle(im list) 共同 sort， imOut.paste(bim,axy) 后高亮图肯定在高亮mask点

这个Parser还挺经典的， next=> s=> regex.exec(s) ret={next:s.slice(N), result: } 就是函数式后缀回溯parser, 用CPS也是
genXX 就是暴露全局变量(如createElm/SVG)为参数. genMonad=(z,b,a=NO)=>{ f=z.next(a);b,a=f(b) } ；其中 a=next,b=res ,!next返回f; 然后 func* parseElm() 来实现顺序，真·经典Monad Parser Combinator.. 只是照我的讲法没有Mon内味了，只像在缩短f(b) 变量，因为(a,b)是无关mon的; 不过也体现纯函数不能改变量，只能缩小参数，靠z.next提供do(>>=) 的限制

的确是很大的约束，函数的值仅据no-mut参数确定，后缀需要靠yield tail=> 来提供变参,执行，不然就不纯(打散循环,隐式上次结果已经够好了，CPS都不会返回)
yield相当于 f(tail=>) 吗？这里f实际上也是不纯的(含b变量)，mon的妙处在于时间和变量上，RealWorld和表达式是没有交集的，所以可以用休眠循环替代伪(尾)递归；对我而言这类是意义全无的，但作为文字游戏仍有趣

render就是加个dataset["data-x-y".replace(/-(\w)/,(_,k)=>k.toUpperCase())]=xY

genStr`a${1}b` =push(str,param),join 是什么鬼.. 一般
f=(s,...v)=>s.slice(1).reduce((ac,x,i)=>ac+v[i]+x,s[0])//首(次v末x)* 项

我已经物理命名法化了…明明之前说要慎用的，笑死

它是以单字符用途不假思索起名变量的方法，如 ab kv 意味配对，xywh 是矩点宽高，ijnm 是2D数组纵横i<n，c配置 e元素 f函数|文件 g图形Ctx
x 也是单项、xs xz 列表和休眠列表next()，ww 意为“w内的w”，w0 意味外层的w或之前的w，1~inf 只是编号，以此类推
o对象 p命题|点|指针 q真假 r结果|弧度 s字串|流  t时点 d翻译表|正负距离|细度 l长度 u链接|blob z休眠中

用途无关平台-View或Widget就该命名为eXX,配置状态只叫c, unord_map就是d或kVs的长名, 无所谓其实现细节，
如果它不兼容标准操作 就用语言让它兼容！如果它有多余功能，无视就好——因为标准操作就那几个
k是广义的键-有v配对就算-i18n resID 都算；如果量有限制(计算量的)意义，可以像i<N这样大写
dt时差 dur时长，cp bg/fg 是单双颜色，ev ex 事件异常，fp路径 im图片 ，
反正能少写就少——但是语义优先，所以它和 ijkplayer 的OI风格命名、匈牙利/魔术风格命名 简繁两个极端是本质不同的

程序是由「统一」和「领域」两部分API组成的，领域名词只有互相联系才有意义，而统一名词没有意义-只有动词能赋予它们意义；越广泛的概念，命名就越该简略-除了是这还能怎样呢？ 我们用它的名词是有目的，还是只增加了理解难度呢？
getUnreadBlogs() 就应该写成 blogs.filter{it.unread} 的样子
名字是依附上下文而有意义的，因冗长或太杂脱离了表达目的，程序不过是看起来不可或缺的一堆废纸。再详细的重复名字，在不想看代码的人前都是对牛弹琴-为啥要在代码片段里管中窥豹呢，我一开始就知道要干什么，就自然知道什么变量是必须的，这种篇幅分配 不香吗？
因此我只适当地用介词，重点在前、易改点在后给函数起名，我从不给变量起名——它不值得专有名字；如果写软件，我会先确定有多少「领域」名词，之后代码便不会多加3字以上的变量；把舞台留给函数签名和//注释，这才是最好的文档。


试想你「最开始」接触编程时是为了软件设计？是为了mod闭源的程序？ 编程都有目的，但忽视代码的结构 就会失去发展的可能。
代码怎样对大家都是一样的，但当你慢慢入行，必须通过更多的工具与语言，重新认识「编程」二字

入门时，要么是照着示例分析作用、拆拼，要么是强记空泛的体系理论和单项；其实这些不完全适合「编程」
理论需和实例配合着用，实例若缺乏更大视角与归类，也很难将功能点建立联系

「编程」是从脱离编程语言开始的，精炼自己的语言来取代C,Java 函数的语义，尝试让不同API实现相同功能——这就是「不用代码」的编程
计算机能做的千千万，排版/自动化、绘制统计、分析转化、机器人嵌入式，它们最统一的就是『程序语言』的定义结构和流程结构，只会按既定流程做「通信 鉴权 排版交互」，用几个社区库，太少了
实质性、独特的东西太少了；许多平台10行就能描述完，许多工作一个sh脚本+配置文件就可完成，它的难度只在于理解含糊冗杂的文档、堆砌定义、不直观的调试
我们需要理解语言的用法、摆脱既有代码的束缚，这就需要对程序动名词定义的结构有好的「语感」、对软件有涉及的领域概念有「代码外的理解」，除了这么写 你还有很多方法能表达——即元编程，这样你习得的才叫『编程语言』——通过思想而非文本编、有概念而非执行效果的程，最后映射到OOP,FP 的定义体或状态注册,API操作上

语感或「代码外的理解」，都不是示例或理论、一两张图能教给你的，儿童编程IDE也不行，需要自己动手、脑中模拟执行，这需要时间和精选的示例

作为优秀的程序员，每行代码为何存在 你都很清楚，而且会以val和fun 避免啰嗦的重复代码、重复行出现，对一个有语感的人而言就会讨厌重复；我想，没有真正的「脚本语言」或「编程范式」——汇编没有离去 但无结构编程消失了；只有把代码写得像面条流水帐一样的人。语言不应分领域，但分文化，更分人。请用有序柔和的语言对待编程，任何人都能成为「代码设计师」和「软件工艺师」，而不是只可孤芳自赏的「魔法师」

那么优秀和称职又有何区别呢？这就需要我们自己寻找了，在社会上，并不是所有事都能用科学、或技术解释，我只能告诉你我理解的编程是怎么样。表达自己，也是语言最重要的目的啊


引入了一些问题，如果一个平台定期清退不活跃(now-atime>6mo)用户，或者禁用“旧版本”用户，能用协程定义禁用规则吗？await corn(6mo);u.acty=false; waitUpgrade(u) ，当然可以，甚至能避免在各种事件里写复杂的逻辑 就能规则扩展，但未必使流程简单了。闭包dump&load——这是元编程，但看似更连贯的事里也可能藏有阴影，如果有更高层的建模方式，就别用语言特性

问题不止是流程，还有交互-并没定义用户禁用缘由和其界面，或者req是如何被阻止的。函数协程能编码流程，在任何地方复苏，可如果它不能完美地把零碎的层次对上号，就不如手动安排；这可以是一种未来，可惜现在的语言实现者连闭包序列化都不把它当API看


ksp诞生后的快速进化引人深思，或许一个新/或你新发现的语言特性或简化手段很牛逼，但它也不过是一种途径，有时明明有更好更直接的做法，比如 a by lazy{e} 就相当于 a get(){if(!init$a)a=e,; return a} var init$a:Bool ，只是根本没法直接用这种简单解法，在静态语言里。许多人只是一遍又一遍，或者仰仗于「不得了」的魔法框架-的一部分鸡肋元编程

自C时代 name "str" 词条层的宏展开用法就很多(C++template匹配解构/rust!宏就更多..)，只是因为预处理器功能限制和相关难度(template<typename> 外的 enable_if<is_same<true_type> struct又type又value的这些谁会用..)，代码生成被“垄断”甚至掩藏了

语言当然应该满足框架的要求，比如系统构造Activity对象 onCreate()后才能查某些信息，语言的 val init 就没用了，Kt版重写的 ButterKnife 像
val x by findView() 也即 by object { operator fun getValue(self,p)=notYet; var notYet:View }.also{onCreateInject.add(it to id)}

使得kt的改良仍有不少重复名字，

当然在bind之外，我们仍可以 class XXPage(Context) { val eA=find(name),eB=find(age)  fun onCreated(b)=super(b)&args.get(DATA_ID).let(kvDB::find).letIt{eA.text=name;eB.text=age} } 这样利用 val init ，(许多脚本2app 的选择)可是不优雅

话说《Kotlin极简教程》的示例真的好多水分啊，为方便不是安卓的朋友了解我就贴整个的代码了
class TodoEdit Fragment{lateinit var Todo
  val db=Realm.defaultInst
  constructor(id:Str):this(){arguments=Bundle().alsoIt{putString("id_key",id)} }
  impl fun onCreateView(inflate:Any?, e0:ViewGroup?, b:Bundle?)=UI{
    verticalLayout{pdding=dip(30)
      title=editText{id=R.id.; hintResource=R.str.xx}
      //content height=400 其他一致
      button{onClick{_->add(title.text,content.text) }}//white on dkgray
    }
  }
  fun onActi_Created(b){superb//懒得写,反正固定call-super序就有问题，至少该靠 open fun 封装掉(){}
    val id=arg?.letIt{getStr("id_key")} ?:return
    todo=realm.where<Todo>().equalTo("id",id).findFirst()
    //上面的databind
    find<Button>(R.todo_add).let{it.text="保存"}
  }
  fun add(ti:Str,body:Str)=realm.useTx{
    (todo?:createObject<Todo>()).letIt
    {id=id?:"${UUID.randomUUID()}"; title=ti; content=body }
  }.also{ activity.supportFragmentMan.popBackStack() }
}
class TodoApp Application {
  impl fun onCreate(){super.onCreate()
    Realm.defaultConfig=RealmConfiguration.Builder().apply{
      name("todos");schemaVersion(1);encryptionKey(byteArrayOf(64))
    }.deleteRealmIfMigrationNeeded().build()
  }
fab.click={
  +Snackbar(elist, "不需要写默认参数或.show，谢谢！")
  TodoEditFrag().let{e->val k=e.javaClass.simpleName
    supportFragmentMan.beginTx() //呃，他写法应该不常规
    .replace(R.content_main, e,k).addToBackStack(k).commit()
  }
  it.visible=false
}
}//App
@RealmClass class Todo:RealmObject(){//all-open
  @PrimaryKey var id="-1";  var title="日程";var content="事项"
}

class TodoA:RealmBaseRecyclerViewAdapter()
class Todos Fragment,TodoA.Click{ //Adapter.. 要把我气消了,当年可懵的我啊
  @BindView(R.todos) lateinit var rv:RealmRecyclerView

  inner class ViewHolder(View, val op:(View,Todo)->Unit):RealmVH,View.Click{
    @Bind var title,content :TextView
    impl fun onClick(v)=op(v,list[adapterPosition])
    init{ButterKnife.bind(this,view);view.click=this}
  }

  impl fun onCreateRealmViewHolder(e0:ViewGroup,et:Int)=inflate(R.layout.item,e0, false).let{ViewHolder(it, {e,todo->
    (activity.fab).visible=false
    //和fab.click 一样但有 todo.id
  })}
  impl fun onBind__(c:ViewHolder,i:Int)=realmResults[i].letIt{
    c.title.text=title //content 同样
    c.title.letIt{fontFeatureSettings="font-size:12px"; textColor=argb(255,69,106,124) }
  }
  impl fun onResume(){super
    realm.where<Todo>.findAll().let{ val Y=true
    rv.adapter=TodoA(activity,it, Y,Y,this)}
  }
}

就这？就这一个构造器能写10行，我真醉了，陈老师编程功底不能算低的,Y组合子(\f. (\c. cc)(\r. f(\x.(rr)x)  ))他写了3门语言，但代码还是这样，估计是挣出版费
原来就是把 xml 里的 name,name_hit 这些名词挂个钩，词重率高得离谱？这也叫编程？？

哦原来比前端高薪是这么来的，CSS 选择一个元素调style 在DevTools里点几下就行，写死成代码就是含金量了，看来还是Qt QSS靠谱
妈耶我还没有见过这么有武德的coder，Builder 这样能自动生成的东西，setter里混几个副作用也算写了？纯属时间没处花；我这还是简化，原版不知有多夸张 js写多了不知道OOP有多卷现在

我真的看吐了，那个setText 既.又()的出现那么多次，居然不把它变成 var set ；就是 Java 里没有扩展成员也得用 text(a,"", b,"") 等写法解决啊，这又不是没有this的jq调用链

老实说这些个工程师稍微有点重视代码质量，他照现有框架编程写个应用就一定会顺带弄出一个框架——既有框架毫无优雅性可言，只有机械合规性；我要机械合规干嘛？我会写parser和JSON dump 这些序列变形也懂函数值可配置，codefmt和argparse 我也写过，管它干啥？机器算1s就能把你一辈子出产的代码排版完(还不是0copy的算法)，可是重点在哪里？括号和深浅的要求8bit都能存住，语义才只有人知道
把空格交给机器涂掉，这是在确信「我没法优雅」而推卸责任吧

其实 R.str. 这些很多是i18n问题，应该说是编译原理人的过失，经典理论里 gettext("保存") 是没法在编译期可知，甚至自动分配 resid 变 noOp(R.str.x/*="..."*/) 的，因为编译期只有结构变换，JS上实际也没有好的「缓存」方案(语言不会给你常量外提-编号化的机会,我们知道aapt 的主要工作就是汇总生成Java resid和ARSC,AXML..文本格式化的xml框架)，总之就是生成的套版码靠name等对应，必须在val get等可注入位置或每次查表；
但是现在有了KSP，一切就都不同了，尽管Kt在国内的一些人眼里还是透明的，它是未来啊


安卓framework API啊，老可配置了，web 的 contextmenu 让js自己看事件冒泡创建UI；咱专门给设置了从 XML inflate “工具栏”按钮，而且仍能 override fun，fun inflate 两开花，ItemSelected 三开花，真是大手笔啊，我的应用每页面都会有三四个非纯文本、需XML描述的..右上角菜单！而且每项的函数都值得有ID，就是说它还能关联函数外的东西..比如hide,accesskey？！说出去多自豪啊，可比web牛逼了，把 Android Java社区牛逼坏了——除了这种屑技巧有没有带表达效率的

列表Adapter 创建 ViewHolder 啊，类型老严谨了！onClick 添上去加 result[i] 参数，再由List加点击事件！反正得把对单项的操作集结对吧
我们都是成功案例上架app，我们做得都对！最佳实践！你甭管 content,title 二词重复了多少遍，大不了多花点时间
VH(View.inflate&@Bind) onBind(VH,i),adapterPosition 《三位一体》
一个渐进加载列表弄成这样，我就解释下吧

显示X数据的XView 称为ViewHolder ，没错不能和系统TextView,WebView用同种起名，只因是绑定a[i] 的列表项- i很重要吗？forEach MutableRef<X> 就不能重设内容/bind，所以每种List都得定义Adapter？
X数据的<ul> 可能有些fab的小挂件，做成浏览栈(fragMan,比活动栈轻量)分页(Fragment,arguments Bundle=TypedMap)，列表是拉环视图
其单项和[i]靠 ViewHolder onBind填写，onCreate 只注册了click事件-完全用不到 list 层的this ，而且VH本身是inner class ，暴露 var fClick 没意义
VH 本质上就是 list索引上的i(views,i) 对应，内容由bind赋值， results[adapterPos] 表明这点
Adapter(=Model->View, 把数据立刻/晚点再写到<li>上)如 SimpleAdapter(a,b=view,ka=String[],kb=resid) 本来可以只惰性创建 getCount()&getView(i,eExist?,e0) 来填满列表，用 VH 后方便重设内容
但 list.click 其实是只关于位置i(的数据)的，如果必须参考 VH.adapterPos，就隐含它可以改变，比如删除后移到列表尾
要么 onBind(VH,i) 变成 (VH,obj) ，要么由 onBind(elms:VH,i) 注册 onclick 不给View集加多余序号，实在不懂渲染个列表哪来数据交叉，挖的坑又多，又不隐藏名词细节

VH不负责创建视图——好理解，列表外的View 也能Hold 嘛，可我真想不到解耦还有如此教科书级，毫不顾虑理解难度歧义，难怪Android上不同UX的控件用户群迥然不同，你想用 SwipeRefresh 啥的 十几行代码就能绘制的动画 还有门槛了，不就是因为一些人 Java 都不会就学 Android，入门就该先拿 DOM/events 写http一言,播放列表啥的，让他们明白 e.textContent= 两次在回交webkit前是显示不出的。哦等到他们厉害了就搞出各种魔法和 Builder 化的函数“回馈社区”了，先学主消息重绘循环，才能看清一些学术不学术、工程不工程的人 在弄啥it works and code NB 的幺蛾子
就比如说 shields.io 那种 badges 吧，就是SVG里一个 width 有变，我见过个rust 程序拿ft字渲库 算近100行，它偏不告诉你我在做啥，非得说些听起来有道理但没暖用的比喻，一个名字念到忘记实质 绕来绕去，你还以为它在用厉害的FreeType技巧，认真你就输了。

我觉得Java最邪恶的其实是没法阻止重复名词复合-好像都有道理，其实不用Lambda也可以用 inner class 隐前缀之类避免

obj:Adapter{ val count get()=10; fun getView(i,eOld?,e0)=eOld?: inflate().alsoIt { tag=tag?:Holder() ; tag.img.bgRes=背图(i); tag.summary.text="项$i" } }

rv.render<Todo>(bind { title,content-> byOrder },
base(R.layout.item) { @Bind title,content; click={fab.hide; nav.go(TodoFragment(it.id))}  })

它大概就把 makeView 和 fillText 分开了，@BindView 只是简写findById的(明明可以据成员名做更多)，但 List,Grid 这些集视图很多，如果每个都专有 Adapter ，怎么可能发挥增量更新的实力呢——而如果这功能不明确，切割 View-Data 意义就不大，假设我在做『软件管家』吧，点击看细节、长按卸载，是不需要 view-即data的摘要 外的信息的，Adapter 顾名思义是提供统一的列表API并给视图单项赋值，那么 VH.<init> 和 vh.init(o) 就不该隔开，除非你会复用 VH 单项内组；即便如此 title,content 都是String，只是显示方式有区别(height:400)，直接用元组编号，渲染时才提及名字最好
