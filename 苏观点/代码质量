
就好像瘦子穿大袄、好像机箱包得很厚，但里面也就几块板子，蛋糕盒都装得下
再多流程形式、繁文缛节，也掩盖不了灵魂的匮乏

如果你看代码第一眼有40%是排版和起名字，那写它的程序员可能是称职的，但绝对功能单一或代码巨大、出品巨少
如果它好用，80%是因为框架本就没几个概念，比如向下兼容polyfill 或加个广告；20%是你只照示例抄当然不发现它配置层叠法有多难看。
如果只存两个框架对象就能完成流程，为啥要查文档呢？看个示例就记住了
在语言语序上没人是1遍完美的，以为自己天才的人多半没受过OIer的毒打；编程的路任重道远，你厉害是相对你选择的参照集体，但计算机的世界，现实辅助与预测 工程领域层出不穷，内心越傲，恰恰说明所见越窄

效率

定义结构 小定义 流程控制
变量结构 集合 表达式

要么起得短且毫无意义，使代码和汇编一样迷糊，要么弄得死长，好像没弄过更大量的程序逻辑
不是汇编，也不是自然语言，是新JavaScript ES6
其实主要是

也放弃了一些规范，比如语句一定要单行、要用function(x)而非(x)=> 箭头函数、for{if{}} 要加花括号、要避免let i,j,x 批量声明、if else 和 f(()=>{}) 缩进必须深1级
其中也有些底线，比如不该写 a=[];if(a) 判空、return(a=1)&&b 副作用、 ()=>f()&f1() 去花括号，各种 x=val= 等号作表达式， while(i--) 重复i遍；在强类型下它们甚至是错的，但JS弱类型，用不到会没事
但我也学会了泛用 n([a,b])==2, is(k,o)= k==typeof o, "a b".split(' ') 和 class{f(){}; static v=1} o={get x(), f(){}} 等ES6新简写语法，以及 putAll=(...a)=>a.forEach(log) 不定长参数等列表解构；尽管未做成框架，但因此对所有API的操控更自然了

通过浏览器DevTools，收发信道Channel的Task封装、FileReader的延时等待 ，更好理解了单线程主循环下如何设计完整的软件流程；这才是没有专门去学app或网页开发的我最大的收获；因为任何平台都有自己“独立”的概念，但你的出品都是基于那些早在平台之前既有的功能来拼凑、微调，被名字蛊惑就会失去很多自主性。

ret=; return ret 这种看起来巧妙实则毫无意义的变量吧，你又没有尾操作 存变量做什么？有的人还专门写 for()if(){ret=;break}return ret 取代 for()if()return ，编程语言在你脑中无能到局部跳转都不行吗？
现在一些语言如 Kotlin 都会用 User().also{it.name="Jam"} 和 readLn().let{ print(it.upperCase) } 来实现变量旧值、或简写了；你还跟着C语言时代 编译器被认为在浪费CPU周期的思潮 同用途重复变量，不累吗？
还有一些巨大的 if else, switch case:return ，超过4个就该改成 {a:1,b:2}['a'] 的KV映射表了啊，或者 {a:console.log, b:alert} 都是有效的，这不是C语言只有函数指针，网页元素 onclick=()=>alert(i) 就把i闭包到e.onclick上，和正调回调真没关系啊，函数就是值啊，和 1,true,"str",[] 这些一样能到处存啊


