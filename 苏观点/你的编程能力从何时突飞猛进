其实每次我看到有人问「突飞猛进」这四个字，都会觉得他们很夸张很浮躁，很不想回答这种东西
不是因为我装，对一个领域你说有那种比人快比人高的捷径，我觉得是对知识和前人的傲慢

科普可以把什么都说的很简单、写得很易读，但绝对没权说它们就只是那些东西而已，你有权自愿去清楚了解各种知识技巧，也可以比所谓捷径更容易，但谈突飞猛进，是把我们当什么了，这是霸道总裁重生逆袭小说？谁能给你那么大的担保，有那么简单吗

不过这种比你小还比你强的例子，在IT领域可能不多，但计算机的各种领域，比如CS,CG,SP,NOI,ACM啊都很常见，因为天赋就是比努力甚至经验重要，那你不会可以找自己真正的特长啊，也可以多了解能弥补某方面缺陷的替补工具。
不过即便人天才也不是突飞猛进出来的，他有他自己的节奏，比你快，但绝对不是一夜暴富的这种，他也会遇到并努力克服难题，只不过比你会头疼的难度高
这个没啥好生气的，按理说天才不是什么「高质量人类」男女，他们的渴望是终生做最爱的思考讨论，而不是金钱权名，他一个人会给社会带来多大贡献，又能占用你多少资源？这个贡耗比还是比普通人大的
或许人比你早三四年，在一些相关方面也有积淀，又或许人家只是比你有天赋、只是比你有灵感，
但在你看来，他就是今年才「突飞猛进」起来的。如此观察一类人，不片面吗？

为什么天生百灵鸟你们就爱听，但有些人就有点不喜欢爱做研究的人；你想想没有人是为你而生的，你凭什么认为他做什么都该能服务到你啊

不追求捷径，不过如果要分享些编程学习心得，动苏非常乐意与大家诉说

不要背代码，你或许觉得这只是应对面试八股文，但你明明有机会先通过自己默写、实战去熟悉一门语言，然后从观察的角度分析它的数值区间、擅长处理的输入样式等等，从而更不易漏的背住它；非要靠死记硬背，背出来该不会连哪些常量怎么改后有啥后果都都不知道吧

别当收藏家，不要买自己不看的书、不要收藏自己绝对看不懂的东西，你可以等有机会做了再去看；给自己一个焦点，一段时间只看一些有联系的挑战性内容，看不懂换下一本，总之别卡到脑海空虚

不要过度依赖复制粘贴，即便IDE都有自动排版和重命名，这势必导致你项目的代码风格混乱，并且你自己觉得代码能跑就行，怎么美、怎么统一不必要，这会限制编程能力的发展

新程序员在意一段程序长什么样
老程序员只看代码的必要性

程序的样子包括结构、变量集，甚至缩进命名这些算法无关的东西，但它也只是程序表象，程序的实质是对问题的解决方案；
问题可以拆分成子问题，而编程是通过解决许多相关问题，来解决一个最终的问题，比如构造一个有些功能点的播放器啊、论坛查看器之类

人们在连续发问时总容易忘记最初的问题，以至于探到半途其实已经能明白更简单的方法了，却执着于某种解法所引入的新问题；最后你是证明了自己、解决了所有问题，但你并没有把心用在最重要的问题上，而是执着于证明自己，是聪明的(呃

代码必要性是比它的意图及算法更高的一层视角，潜台词是：这一段不是不可替代的、不是不可或缺的，它只是服务于某种更大的存在的小细节，是手段选择而不是目的
当然了，或许它是重点，但除了这样写，也有许多方法完成任务，就像一个大 switch 有时也能换成字典或数组查询

好的程序直观反映其操作数据的结构，数据也同样能左右需要它的程序的行为

通过把问题拆成小的子问题，编程会变得更容易、健壮和高效，而且同类的应用会有一大堆小问题是重叠的，比如百度贴吧、QQ部落的论坛查看器，数据模型如用户、帖子楼层会有许多重叠，网络访问上许多操作也是共通的，这样你就能以少量的代码实现更多的软件特性；以及，成为一个真正的程序设计师，而不是死板生硬的堆砌工。

可还是有人只在拿它划分几段动作，不会拿带参子程序做计算，起不到简化代码的作用，唉。


编程是什么？我的几个阶段或许给出了不同的答案：

靠拖拽各种动作方块到某事件下方，以角度和距离操作精灵和舞台动作 /图形化编程
靠易用的逆向工具把一条语句复制到某个被触发的地方，修改游戏行为 /面向侧面编程:追加首尾逻辑
用入门教程的函数变量语法和循环判断结构、惯用法和搜索来的API接口示例、特性启用小片段、IDE生成的项目结构，战战兢兢测试软件界面的行为 /复制编程
用不知背后藏着怎样结构数据的新奇语法按意图照猫画虎粘合、改写各种示例，最终试出能编译的程序 /缝合试错编程
编写能操纵代码结构的代码，从而简化重复的结构定义 /反射,代码生成,元编程
在 .data 段加个字符常量, 再在 .text 段加个 push bp;sub sp,N 栈分配调用 CDEF mov di,.LS; call libc:printf ，让汇编器序列化、ELF指定的 ld.so 解释器链接执行 /x86汇编
以语言提供的基元量/函定义、控制结构、数据/集合操作构造需要的程序，求得副作用或返回值 /看见语法树的编程
利用函数值的组合定义对某个单项流、某个嵌套结构的操作结果  /闭包组合子编程
以指定关系成立，求得所有可能的每变量-取值元组配对 /关系式编程&SQL
以某个领域动名词集和实际API起手，考虑数据的表达形式、必要公式和外部组件、程序和变量的利用/生命周期和事件时更新，随性组合语法与占内存对象的修改/复制、查询库函数、创建复用函数，编写单线程命令工具或应用 /面向数据形式和界面&语言无关编程

在每个阶段都会有对代码的审美，比如爱 for(i) 不爱 for(item:items) ，爱 if 从不用 continue, return ， ++i , final 参数 这些就是更明确,  ijk, tmp, ret, mEnabled 这些就是很正常，喜欢全 public

那时不知道 new T(){void run(){i} } 和 class T1 extends T{T1(int i){} void run(){}}  后 new T1(i) 是一回事，没人告诉我等音乐放完后再干什么呗， Thread.sleep 为啥会让界面卡住，Py脚本就不会卡啊，不懂 finally 和 catch 有啥区别，觉得异常闪退好麻烦，第一次抛异常的地方就 catch 掉

想想那时真的好傻，Java 区别不大的套路太多了，他们的框架藏住的东西太多了，你不知道 Java 根本不是专门给 Android 设计的语言，不知道不规范操作是报错还是怎样完全随机，而要实现这些非串行调用的特性需要 new 许多八股文，和 JS 的 Promise 任务模型、ES6 统一性根本不在一个层次，VSCode 甚至整个是单线程应用，如果有一个事件注册逻辑死循环就会直接卡死；你又要去找 Maven,Gradle 加依赖库，看到他们一本正经在改什么依赖关系传递性，真的很让人困惑，pip 都知道 install 完整体依赖才能用啊

但走过这几个阶段时，我觉得最重要的始终还是：

尊重自己、善待自己
大智若愚、求知若饥

不要写很深层的嵌套，别以为肉眼能比计算机更好的配对一堆括号。比如数组去重，能用 Set<T> 唯一集去做就别用循环剔除，能用 contains 就别用双重 for 循环，能用 foreach 遍历就别写 0~N-1 索引访问

不要追求少两三个字的短小、要追求易懂，对已经自成体系的老手可以私下使用，但新手非常依赖完整的变量名理解当前程序要解决的问题，不要截断命名、不要滥用弱类型及不直白的简写、善用常见单词原型和介词命名，如果不会英文，直接汉字命名也别拼音；别学数学混用各种样子的符号，把别人和重读代码的自己搞糊涂

不要过分利用调用返回值外的副作用。比如 Java inputStream.read((byte[])buf)==numRead ，如果某程序要修改它参数或全局上的某些值，尽量缩小合并它的使用范围，尽量用子程序封装这种库函数的用途；而且面向对象也不该有单实例外的全局啊
当然如果你已经实战过了，更自由利用参数/可变引用/副本复制是非常好的，但入门期要避免从简易数学变成变量流程性的思维


