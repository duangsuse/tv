Scanjs 的输入流是一个 (n:Int)->Str 函数。当n是正数，从当前位置右取n字符；当n是负数，取n并跳过 “消耗”掉它们；即对输入前缀 尝试匹配。
当结果是"" 时，流结束。如果在读["a","b"]空白分-列表，收尾，得到这完整的列表。如果是读[1,2]且碰到 a-z，添加一个错误并让“列表”级读取跳到下个',' 位置才继续『镇定解析』

流解析器能增强REPL的功能，且兼容 strpP(JSON.parse,/my(\d)/) 支持定长匹配

从文本、缓冲stdin 统一的输入流，需支持 错误列表、行列号、跳注释空白；还有信息表以提供 () Paired位置配对报错、缩进解析。(即 报错行号注释信息表) 注释和空白仅在 词法状态 st 非0时前置读取，其结果可在 wsBefore 保留，通过 p.tok(STYLE) 标记内空格自理的词条，供高亮等，AST节点也能通过 span[e] 取区间，如配对{}的地址从而『增量解析』。

SBRie 是通用5模式。顺序、情况、重复、单字/区间 Seq 靠tvr (可执行AST树模型) 举变量名保存(如成员定义/值)； Br(T1,T2) 利用类型信息和 T1.p 变量对应，允许重回源码。Rep(p, asAry) 可收集到列表甚至10进制数字

而 P. ifCat,ifCatBr 可兼容 Java,Kotlin 的 `int x; int f(){}` 和 `val/fun` 解析；ref()(self=>) 可引入递归如if{if}； ops 可把+-*/ 带左右优先级，转化到逆序栈(先求值者,深者,在前)。a+b&&c 则将惰性括号化为 `a b (c) && +` ，方便与栈VM指令格式对应； `- !` 等前缀和 `.item [k] (args) is T` 等后缀链也按优先级(可后<前 也可 前<后) 写到栈

Tries 后缀树不仅可高效匹配前缀(如 public private)到值(如 0b01 0b10)，还赋予源码正确时『跳字解析』的优化；且为按前缀查询的补齐 提供了方便

Scanjs 可以轻松读取并还原(prettify) JSON,CSS,Turtle Logo,Java,Kotlin,Lua,C#,C,ES5,Py 等语言代码；包含泛型、"{}"文本内插表达式、嵌套注释 等，它不追求像 ANTLR,PEG 等工具在任何语言表现完美，只需识别通用语言时解析器易写，因为计算机语言的本质是清晰简单的结构。

过去 ParserKt 的 Feed 流通过单字 consume() 时异常的方式通知流结束，但任何在收集的列表/数字 都会需要catch 一层，而且多字判断困难，所以干脆取字串。

模拟状态机的分词器 支持push/pop以支撑 /* /**/*/ 等语法，但现代语言里分词与解析实际不宜过度划分。

尽管DFA内跳转地址固定，我不选择模拟自动机来切割字符数组，甚至织构整个语法树。\uXXXX能模拟循环展开已经是少数情况，多数简单\d+ 考虑解释开销 并不比递归下降-双层级 的while循环快，相反while通过n*10+能避免二次遍历，状态动作则只能拿文本片
