作为程序员，刚刚流行手画圣诞树，就给大家推荐几个圣诞树网页。

http://js1k.com/2010-xmas/ 的第一名只有这些代码：

document.write`<canvas id=c>`;M=[],V='rgba('
J=[];U=16;let{sin:T,sqrt:E}=Math;Q=k=>k*Math.random();
for(O=k=0;z=x=j=i= k<200;)with(M[k]=k?c.cloneNode(0):c){width=height=k?32:W=446;with(getContext('2d'))if(k>10|!k)for(font='60px Impact';I=i*U,fillStyle=!k?'#cca': k==13?V+'205,205,215,.15)' :V+(147+I)+','+(k%2?128+I:0)+','+I+',.5)',i<7;){beginPath();arc(U-i/3,24-i/2,k==13?4-(i++)/2:8-i++,0,Math.PI*2,1);fill()}else for(;x=T(i),y=Q(2)-1,D=x*x+y*y,B=E(D-x/.9-1.5*y+1),R=67*(B+1)*(L=k/9+.8)>>1,i++<W;)if(D<1)beginPath(strokeStyle=V+R+','+(R+B*L>>0)+',40,.1)'), moveTo(U+x*8,U+y*8),lineTo(U+x*U,U+y*U),stroke();
for(y=H=k+E(k++)*25,R=Q(W);P=3,j<H;)J[O++]=[x+=T(R)*P+Q(6)-3,y+=Q(U)-8,z+=T(R-11)*P+Q(6)-3, j/H*20+((j+=U)>H &Q(1)>.8?Q((P=9)-5 ) :0)>>1]}
g=c.getContext("2d");
setInterval(function G(m,l){A=T(D-11);if(l)return(m[2]-l[2])*A+(l[0]-m[0])*T(D);g.clearRect(0,0,W,W);J.sort(G);for(i=0;L=J[i++];g.drawImage(M[L[3]+1],207+L[0]*A+L[2]*T(D)>>0,L[1]>>1)){if(i==2e3)g.fillText('Merry Christmas!',U,345);if(!(i%7))g.drawImage(M[13],((157*(i*i)+T(D*5+i*i)*5)%W)>>0,((113*i+(D*i)/60)%(290+i/99))>>0);}D+=.02},1)

作者说这用到 sin(r)约=cos(r+11) 、i%n 即i>=n:i=0 ,1.1>>0==1 ；同时用 r=Math.rand 和 function(p){if(p==undef)} ，以及压行 单字母名啦；最后说只要坚持，5,6k的常规程序基本能缩写到1k

座标系给了我们描述与计算物体位置的能力，3D一般使用左手座标系：xy=0,0 最左下，添加z以表示深度。 拿左手比个枪，食指向上 看手背 你就得到了第一象限(数学'c'字编象限)，再伸中指，就是z轴。

圣诞树不看这彩灯，由绿圆树叶构成；每个枝条都是由一些3D点组成的，点最后绘制时被画成树叶或彩球

树枝点集由 xy平面、xz俯瞰平面 计算，树枝越靠底越长，我们靠增x随机累加y生成上弯弯曲曲的点集；但这只能弄出平面树，于是我们有自y=0点旋转公式 (xcos r-ysin r, xsin r+ycos r) ，将其应用于枝条的每点就在 xz 平面赋予其一个z深度

这是大致理论，但怎么绘制3D树并旋转呢？其实相机旋转和每树枝xz平面的旋转是一样的，只是作用于所有树枝；实际绘制代码
P.sort((a,b)=> A(az-bz)+B(ax-bx) );
P.each(([x,y,z,i])=> g.drawImage(G[i+1], xLeft+ Ax+Bz, y) )
其中 A=cos(t),B=sin(t) t是旋转角；为了性能不写成函数。以上就是“著名”的画家算法，z大的先画(注[1,2].sort((a,b)=>a-b)==1,2 )，当然是指旋转后在 zy 平面上。xy 平面呢，旋转只有x会动 无关y
Az+Bx, 这是从z，即正方体左面看的y轴旋转结果；Ax+Bz 才是从正面；z轴排序，是画家算法

来，我们是从y轴转，现在面向y- ，正面是 横x竖z
左面是 横z竖 -x ，所以有 sort((a,b)=> Az-Bx ).forEach(drawImg(,Ax+Bz, y) ) ，这叫画家3D算法，明白了吗？

回到枝条的生成，从xy怎么y转出xyz 呢？默认其z=x 并在 xz面旋转 [Ax,y,Bz] 即可，y不变 正交；默认z=1行不行？两个点x不同，同角度旋转后y(即xz座标系的z)增量也不一样，会失真
如果我想同时在y和x轴旋转，先旋转y轴再转x轴，最后在zy平面看深度 排序后绘制
如果我想旋转相机，也是每个对象以相机为轴旋转，参考2D向量计算
for(k<200)
for(H=lz*(y=l*.5*k++),xx=0,r=Q(DEG);
    d=3/*尾端直点儿,加彩点*/, j<H; j+=L,xx++)P[枝++] =
    [x+=Qh(lZ)+ R(r-11)*d, y+=Qh(L), xx*R(r)*d,
    j/H *10 + (j+L>H  &Q(1)>.8? Q((d=9) - 7) :0) >>0]

P.sort((a,b)=> (a[2]-b[2]) *A- (a[0]-b[0]) *B ) //zA-xB
.forEach(([x,y,z,n],i)=>{
  g.drawImage(G[n+1], W/2 + x*A+z*B >>0, y >> 1)
})

顺便一提，网页元素只有z索引，即遮盖顺序；如果说3D用左手座标系，那网页就是左天花板角座标系，z:100比z:-100 靠近用户

这有个利用THREE.AudioAnalyzer FFT响度的音乐圣诞树 https://www.paopaomj.com/test/christmaslights/ 嘛反正GL都是图形学大佬，我就是个还不太会玩向量的孩子

全网少数几个WebGL ThreeJS圣诞树 https://wow.techbrood.com/fiddle/31588 https://blog.csdn.net/u014597198/article/details/71515918

document.write(`<head><script>
let a=1</script><script>let a=1;let a</script></head>`)
全局变量是指window.key 式属性，即with(this){key}引入的隐式域，而 let/var 全局函数量也是跨script但对外不可见的；这不同脚本let冲突会报错，窗口属性或全局变量，词法域很模糊啊..JS的黑历史
这个Fiddler实现得也有bug，它应该把脚本包在 +function(){}() 里执行的，我不删了所有let 直接语法错误，唉
顺便一提，DevTools 当然是能选择顶级词法域开REPL的，调试 iframe 没问题但拜托你把初始化代码移到函数里行不行啊，这throw时中断了就没法再恢复，码风怎么那么脚本流水帐呢？ https://zhuanlan.zhihu.com/p/95463367

最后我贴纯原创的吧，非常 old-school 了，递归树形 和几个SVG三角层叠；尖端都有星星

递归树形，每层长l线条的末端若n非0 加 k个角度r 的新线，深n层，每层l-=10 这样缩小

2D上最少3点围成封闭图形，60度是三角，每次折180-30度可以画五角，其边数2倍于5边形；当然奇数+180 偶数+90 也行
树身先画低的矩形，再是高的等腰三角。有没有给定三线段的长度就能构成封闭图形的代码呢，其实画个正三角形，左右两点的x 等比放大，就横拉成等腰三角了，也不需要外接圆计算；甚至给你底和高，两个底/2 的斜线矩形 就是等腰三角

比较逗比的是彩球有z-index ，指针移动于屏幕宽，最小者x+-20像素；越小越远；然后树三角都是歪的

呃，我想说这些网上的圣诞树如果是IT系送人的话，最好自己花点心思，至少拿源码改改样式，比如加 linear-gradient radial-gradient 渐变色和 @keyframes a{0%{}to{}} animation:2s 2 a alternate；不要直接拿录屏啥的，技术可以随意，感情还是认真点 不存在聊胜于无

最后的最后我想说一句，我已经完成桌面壁纸程序(Win8+ 基于特殊全屏浏览器)，准确的说是落雪和彩灯小挂件 ，点赞破50 我把这个挂件发出来。

然后新年的时候我会更新灯笼和鞭炮版的动态壁纸，别忘了关注我呦

//大小 贴图 树枝 枝折 彩球量
//色彩 树 彩球 彩球炸 枝风格
//此树 副本 删除 雪色 方向 区域 量
