a=[0,1,1,0] 如何把非0项移到最左，是2048的重复步骤。 for(i=1;i<N;i++)if(a[i]!=0){a[0]=a[i];a[i]=0} 可以把(1~最右)项改到位0
若添加n=0, a[i-i+n]=a[i];n++ ，左第i项(=0)的右n 设为这项，相当于往左部长n的列表push 全部非0项。 但i-i =0 是多此一举吗？

因为2048“Array(h*w)矩阵棋盘” 有4个扫描方向"iv"，-1 +1 -宽 +宽 左右上下，也即 a[y<h][x<w] = a[y*w/*跳过之前行*/+x]
确定每行的起始格号你会写4份代码，但使用从 a[i-(i-n)] "(n=0则0)最左定位"加方向的 a[I-iv*(i-n)] ，我们就让这个“下落”算式同时适用于4个iv方向

这是编程里一个重要思想，『泛化』，复用简单的步骤 实现较难的目标，在设计之上堆砌。
但如果只是让0在左，sort()即可。2048 在下落时会合并相邻2项，0110=2000; 1111=2200 ，这好办， a[i-(i-n)]=x 的本质是往最左列表里push(x) ，其最右=取-1 ，若相同，直接乘2 不push了

但是这样移完显示棋盘，只能弄命令行版2048，格的移动无动画。 其实每次用户按方向键，都对所有非0格赋上id=e[i等位] ，在合并时除了*2 也要让id=[id,右.id]
每轮移完棋盘 就Promise.all 所有非0格 mov(it.id, e[i]) .then(gameOk) 显示新棋盘

以上你就设计了2048小游戏，Java和Py的话 0 或.id 属性可以变成 null和(int,elm) 避免类型冲突，反正每格要对应1个显示元素 而不是可能重复的数字

1帧里贪吃蛇向右(d=1)前进，蛇头在p点。若p+d是空气，向前涂黑1格 去尾并涂白；若是苹果也涂黑1格；若是墙就挂了
if( (v=a[p=p+d]) )die(); if(苹果){push(a[p]=1);return}  push(a[p]=1);a[pop()]=0
后2个情况可以写成 push(a[p]=1); if(!苹果)a[pop()]=0

die() 有两个变体，传送墙壁和无敌/撞自身无敌，当然还有贪吃蛇大作战的死亡爆果
蛇体也可以在帧起始反转，p=反转后[]里最右项，d=尾部两格距离差

但实现平滑移动动画，不能直接用这种方法，因为平滑需要知道每帧间格子的位移，只能重排序 不能新建或删除

蛇在p，若+=d 是墙就挂了，否则保留碰撞到的内容。 添加并看方向队列，a[p]=a[p-d] ，反着直到最后1格。如果碰撞到苹果，a[p]=1 新增1格 。添加新方向

1个你可能会吃惊的事实是，传统4向贪吃蛇的逻辑套在360度贪吃蛇大作战上也有效，朝当前方向添加1点，除尾，1回合渲染1帧；除了圆形或矩阵取碰撞项，二者是完全一样的，向反转、传送这些都能通用，就像一些浮点公式套在整数上也OK
