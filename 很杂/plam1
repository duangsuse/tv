
Hachiko: recordDelay,pitches-only,-i ; grp:lrc,cpr
formscan,hotline SR,qr,audIO
圣诞老人举牌canvas

AxureRP 检视/toolbar family,variant,size,BIUS,color font,fill(alpha/graident),border, item-marker,align/anchor,shadow,padding; Line color/size/type , 行距,文字阴影 与样式集，页面和母版(皆视图)、控件树、图标集、动态板、代理器的内含视图；横纵翻转、对齐文本宽高；标尺、xywh保持宽高 辅助线和排版对齐、圆角和形状、复制粘贴导入、历史撤销
相交/内含选区  图连接 LRTBC边界点 格式刷
组合 锁定 z上下移 Ctrl-[ ；对齐  分布

HBuilderX 换行符、编码、RegExp bireplace 大小写URL XML 转义，快捷键分组表、大纲，插入实体字符,js html换行、每行行号，闭标签、文档声名、版权信息，dup/move/select 行、跳转词行页和tab、转到、折叠、列选择，选中当前/父/前后节点、成对标签或内容，查找替换、多文件/历史版本比较，标签规范信息
coffee,css/js,haml,less,sass/scss

sprite图+检测充rect给所有人做大学习截图，完结多字图
9patch与禁语r[0-1]游戏
2法今日校园签到
duckbeckpen
死啦死啦地NLP
shuffleMerge和答题卡扫描
示例：学号和挂科集合
维胺颗粒：思想、语言、行动、习惯、命运
Tokenizer Render 渲染<br>与 Trie 的 Iterator
https://github.com/Kengxxiao/FinalGearDatass/blob/master/gamedata/sc/BanWordData.json
民主专政、ancronjs compileCalc.html
TagPDF_ISBN、Android Anim
OpenCV 马赛克检测
Symbolnic: writeTo/constraintsTo/evaluate(scope)/substitute, reduceSteps? 区间L,R改写&嵌套已折叠L，
  OpChain,precR/L = -1
  递归子区间的递等式构建
  约束的连续区间合并
loop alert 和 for (d in cos w/2 for (x,y in tan w createAnchor (sqrt a*a+b*b, WebAudio recorder
区间+x 杠的 Swing 控件
decimal selector / concat / reverse 的性能 和 counted destruct
Lua 计算器和 findPaths 逆向计算
CharSM, (combinator), Substr, (iterator), (StateMover) 性能评测 lit py
Java Swing 绘制 xyrange,label,tick 支持的 Plot 与 RingBuffer 的应用
Templator 的 build/serve 与 web 示例 “添加注释 most recent definition”
ArgParser 拆分、 的 web 示例和 bash complet.
Kotlin Db codegen 与 Telegram bot 继续
ParserKt 的LayoutPattern Either, LexicalScopedPattern, HanCalc, SkipWhiteFeed、命名 顺序 Deep.List 的使用、的 web 文档示例解析操作
TkGUI 的 codegen 与文档， Swing 与 C/C++ GObject 和 ImGui 生成支持、Web bottle 后端, DroidUi
LiterateKt 、与 lkt-wrapper.jar 和 kti
BinKt 、JS 平台支持（可参考 js bin combinator
Funcly-PKT 、play.parserkt.org 的体验场
不纯写作： 设置页斜切混成稿纸风格，
字体/号/颜色风格， MD 渲染器 / GFM Lbreak / 高亮当前行 / 所见即所得，底栏(编辑)/字数与概览+章节/渲染页，ParserKt(预定义语言)/LPY宏系统(//<->!! 与 !!include, !!expanded(WTF, !!date()) )/文章集合并选项
宏展开调试底栏 ，所见即所得 粗体&下划线..下划线
文章集支持 pinned , 删除文章 Yes(3s) 灰色
分享文章/打开文件夹/长截图
sync(chk.pull&push, add metadata macro)/push/pull, 查看diff
send to services(clipboards)

2D游戏设计：脚本与舞台、BurgerSpace、帧与物体的运动 和 update (多态、集合)、物理计算、计时与碰撞；位置方向状态碰撞

性格：体型说

《跳转回填》高阶函数、指令架构、词法闭包、上值引用、指令重组、窥孔优化、代码模板、三色GC、对称协程、协程切换、垃圾回收、局部跳转、码位屏障、画家算法、取反开方
我思故我在，我说故你在。
以创为我乐，以理为我守。

是很实际的工程，哪个应用没有易懂或有趣的图形、好用的机器学习推测、计算机视觉，只要相信这点，我们就能始终为领域，而不是自己身上的标签和自傲服务。

拆分，设计和重现数据、计算设备
不滥用 XXXer 可变数据对象
尽可能往大情况编写程序，写应用于更多功能点的子程序参数
(x,y)=>d=> ，按变化率

设想下在线时间心跳包统计，锚点的变换求和，从小的模式感觉到大的重复、规律是程序员间的一个分水岭，从连续到疏松，约束间又有空间，能感知才能自由重构

真正的设计，是对程序的附带数据、资源、外部接口和结构进行自由的调整变动，从不多写一行代码、从不浪费一点信息量！

世界上有什么是程序不能介入的？程序就是规律，编程就是寻找真理！

正是因为我重复了那么多次，才会对重复的代码和无聊的套路恨之入骨；这驱使我设计出

你们想不想扪心自问一次，为什么你们这么强却想不出来？自己编程时有多少是在为成千上万的计算机和其他程序员着想，有多少是为自满和炫技。我没有执着外的资本。
世界上的输赢并非只靠力量或者耐力，还有其它维度的对比存在。

或许有人觉得，科学这个词等于物理、化学、生物、地理，但那只是科学的形体。实际上，科学的核心只有两条：探索并整理出现象的客观规律、以理论和灵感为基础创造出可复用的新东西。

或许有人觉得，科学等于无神论、否决一切宗教型象，但科学的灵魂在于用语言描述周围的现象、用思维对现实世界进行建模；科学从不肤浅地否决它不确定的东西，它就是所能预见的现实。

科学只是人性的一部分，它本身没有善恶；科学的好坏在于它的施用环境、利用方法。
科学是利剑，也是钢盾；科学是问题，也是解决方法。
不管你承不承认，有人的地方总有好奇心，总会有科学；科学者总会追求真理，不管有多遥远。
即便没有科学，人性的丑恶也会显露无遗；因噎废食不值得

但不管是好是坏，科学其实也维持了世上最稳固的平衡--它让女性也能从容在社会立足、它让人地匮乏的小国家对大国也有了威慑之力，
所以，关键是在0至1之间平衡与牵制，极端的选择可能导致反噬和倾覆

「可怜之人必有可恨之处」，其实这句话的原话是「可恨之人必有可怜之处」吧。在他们还是可怜之人时，把他们往可恨之路上推的，不正是说着这句话的人吗？

或许大家会觉得，函数式像个阶梯，而我所了解的那些大佬已一步步深入到目不可及之处；实际上我在第一阶后就止步不前了，但也只是换了个方向追寻——把阶梯变成普通的梯子，让只动手的人也能和所谓的大佬们站在同一高度解决问题，或许这是对“编程艺术”无知的亵渎，但我相信，探索的进程自有它的价值。

编程到底是什么，程序员到底有什么不同，『绝句』是我的答案[^程序员没什么不同，或者说不该有不同。他们只是更客观、更利落得体地描述物体和相关的事情而已]，也是我进一步的发问。
编程到底该怎样？绝句新人们，请努力找出你自己所见的答案！

创造来源于不完全的重复。
科学、综艺与四分时间规划法

编程是寻找问答的规律，元编程是寻找代码的规律。

五大库(参立律陶瓷, arg,bin,code, tao,chi)
参循、参文
算试库(alg,test)

词法作用域=编译期动态作用域+闭包支持
子类型，支持编译检查期计算

交换，结合分配
矩阵 join,map, A^T 是转置矩阵, 自反:负负=自

我从不认为创建一门语言应该是轻松、随便的，尽管它应当开始于对相关知识游刃有余状态，语言设计者应该为之后可能的广泛应用考虑——或许不必为新技术优化，但必须保证领域里那些已换了无数马甲，但恒常不变的东西始终简单如一。

程序为基于所有目的的所有人，在一切地方服务，不为编程者的狭隘和傲慢服务。

鸵鸟失去了翅膀，才成了世界上跑得最快的鸟；鸟儿们在别人看来拥有广阔的天空，可每天活得也很累。

『这门语言懂得所有语言』
站在科学与生活的衔接处

或许你觉得知识是必需品，但你做怎样的人，最终还是取决于你自己。只要你愿意，10 的 100% 还是比 100 的 1% 要大；没有『知识』不是自我否定的理由。
等级评测的标签。在途径上输了，但目的上赢了就够。

在面向对象的组织下，以函数式为面目、以过程式为身躯

正统面向对象，没有 new, static，没有显式 this 或者干脆只支持点语法

如果说绝句是一件华服，那么控制流是它的针线、高阶函数是它的纺织、面向对象是它的草图。

缺少针线，多美的纺织也只是空中楼阁
不会纺织，再牢固的针线也是一团乱麻
没有草图，用最好的布料也难以组成易于修改拓展与合作的服饰产品

面向对象言之有物、过程式言之有事、函数式言之有涵。

绝句面向对象，主语/名动多义面向对象。

过程式、函数式、面向对象，缺了任何一样都无法编织出和谐统一的衣服。
作为一门清晰易懂的多范式编程语言，绝句更同时融合了关系式编程范式，提高程序所能触及的抽象层次；并且，语言本应同时包含工具便利性与表现力，绝句既是你展示才能的『缝纫台』，也是要缝制的布料本身。


或许会有“计算机科学学者”评价说，绝句也没有什么本质上的创新和了不起的算法及技术。
的确，电子计算机的语言，也就那么多套路；绝句能组织起的程序，只能在它们的意料之中，而万变不离其宗。

你是否深切体会过失败的滋味？是否还记得最初不懂时的痛苦？
你是否尝试过否定自己，将一切推翻重来？
……还是开始否定过去会头疼的自己，以及最朴素的真知？

或许在你眼中，绝句不值一提，没有更开眼的算法和范式，也没有鄙视链上被神化的地位，但绝句并不因此否决自身的价值。
不破不立，它从不全盘接受混乱的理论，而是发现、挑选、融合、创造，让美带来美，努力从沙砾之间寻找其最融洽的形状，那是它的『自我』。
为了超越完美，不惜放弃“满分”、突破常规的束缚，绝句，不侮辱『科学』的名字。

其实，在开始时绝句一直有错漏、误解，它一直失败，三四次被打碎重塑。
放低身姿、承认失败、努力改进不丢脸，害怕变化、狭技居奇、自满傲慢才丢脸。

换一个方向、换一个视角，总能有所发现；绝句正是靠着这颗赤子之心，才能从这 10% 的「不同」里带来它真正想要对你倾诉的真理。

即便绝句是永远的失败者，它也是在难10倍的环境下努力脱胎、循序渐进的生存者，即便失败、像是个怪胎，也和总在舒适区里成功的家伙，有着不一样的觉悟。

绝句的诞生之道，来源于对优美与简单的朴素追求，希望各位在编程生涯中，也能牢记绝句之道，努力追求更美的代码与结构。

作为一个实际的软件工程师，应该努力让世界理解我们，而不是用自己片面、混沌的理解误导所有人。

【非常科学的关于起床伸个懒腰、洗漱的人类行为描述】，过分拘泥形式、无理由追求“不死板”的编程是没效率的

1元整、此据、散会 与 \0, 长度前缀
2a+4b==nFoot; a+b==nHead 鸡兔同笼
A_11 与 A_1,1
1**-1

理解 线程（任务管理）、回调、事件、同步/异步、消息队列、MVC、Model/View、DOM
forEach,一次选两个人,快慢指针

IO/Stream, thread, async/Stream&event-loop
Fn Runnable/Setter/Getter 1=T,R

看起来只是不断执行的程序流程而已，却要理解它根本的含义，从类似的程序片段中寻找恒常不变的东西，找到程序和数据之间的联系——有时是程序生成数据、有时是数据生成程序行为，有时数据驱动程序生成更多数据。
第一次看到 Kotlin 的时候，我感觉它很混乱，let/run/also 这些“关键字” “语法”（其实只是方法调用，将一切归于“语法”是懒于了解语言规范的做法）让我感觉莫名其妙，但后来却越发觉得它引入了“脚本语言”的便利，提升了表现力，却很好地拒绝了那些语言滥用的部分。

可以为函数设置默认返回表达式，这样 return 不需要参数

从0数到100 是101 个数

可以支持类型操作符，如 A表至B 。

不严格绝句：前缀记法、 全都去(成序列) 、xs[1~2]、 1~|2

可以支持单行嵌套逗句简写；可以支持 去 里的 它、隐式 的，「其」简写引用，
bodyˇ
  head() 与简写 body>()

【再定默调位于(位置.首部)】

对何<型> 恒事 typeof(表达式：型) = 类型<型>()

fun with receiver (on instance)?
物 增加器(变数 和 初0) 为
  事 加(：数) 为
    和令为「它+数」
  事 数.被加() = 我[^增加器]去加(我)
增加器()顺便，1去被加。
【层叠域之事】的量 增加器.被加: 数.()得效果 

全局、实例、函数、涵参，生命周期、重置
线程 入列/孤立

鸟彩图，canvas描线图，点击显示代码编辑框

没有 const val ，只有 常T ，加 【常量判型】R
【特例优化】

取消 crossinline 和 reified T ::class (is T)
使用【内联参函(真)】@InlineArgFun(true)

况物支持 例， 简写
支持去掉形容词定语「的」

4次，说(1)。 不支持中后缀的块参数，转为内联类的 用于() 算符，因为不值得在类 Ruby 的传参上添加特例

类型别名 数 = 数4

关系式等号的含义没有过程式的赋值，更类似“没有变量、仅有函数”或者“变量基于其定义量自动更新”

这个人的命运啊就不可预测，关系到自身的奋斗，当然关键在于历史的进程。
如果把个人的奋斗和历史的进程结合起来，鱼和熊掌可以得兼，就更好了
于变局中某胜算
知其不可而为之
谋事在人，成事在天
苔花如米小，也学牡丹开

绝句 声速关系式 体育场抛轮胎

红姐亲，还是请你回去把自己每一行代码讲清楚再来吧，
贵领域的人总是喜欢搞这个那个“好玩”的玩意，别人看了感兴趣又不愿给人说明白，又想让人仰视又想让人坚持的心态真的好矛盾啊。
你再这样非此即彼的看待问题和其他人，必然走向恃才傲物、固步自封的死循环，当然那也是你的自由，你始终有权，但也始终仍有选择。
我觉得，你们这样的人从未拥有过知识，只是奴役知识；只有把知识分享给其他人，才能得到所学之物的另一半，不然只有你自己粗浅的第一遍理解，很多人还以此为傲，呵呵。
谁不是在社区热心人的帮助下走上来的，可是谁在自己有“天资”后仍屑于看别人一眼呢？人性就这样，但你仍有选择。
编译原理、算法、信号处理、计算机图形学，那个领域不是触类旁通的，可是有人敢在浅尝辄止的情况下断言自己靠既有知识就能吊锤其它领域的项目？既然如此，应用程序编程又如何？如果你觉得自己“高”，为何不，改变它一下？
如果大佬您继续这样“热爱”自己的领域，我也只能祝你一帆风顺了，因为那些始终谦虚进取、善待他人的人，在某个方向有所突破只是必然发生的事情，无需仰视和祝福。

以前我觉得，中国人是团结的，后来看得越来越多，我发现人类的集体其实都是冷漠的；但，至少还是在分享无形的东西上团结一点吧，可我觉得，知识程度越高的人，这种意识反而越低；部分国人甚至对中国这个集体产生了偏见，也对我们的整体文化产生了些许不理智的反感。

带着乞求地，我想说中国不需要狭技居奇的“专家”、“牛人”，为什么人们要对自己的专业冷漠，甚至互相嘲讽、鄙视。

知识在我的眼中是自己就有生命的。尽管大部分知识来源于人的脑力劳动，但它们仍应是自由的、属于所有人的；热爱它们的人应该明白，同一个知识也有不同的形式，它们是渴望被理解、被传播的。

知识分子不应该把知识视作专有的、属于自己的财富，人们崇敬文化，也不该对那些无所贡献、只懂炫耀自己很懂的人卑躬屈膝，因为他们藏的越多，这些傲慢就越容易带来问题。

看看那些“天之骄子”、“数学天才”眼里别人的样子，奠基者不说，其他人有想过为社会上的其他人，要接受那些知识的人考虑吗。

什么象牙塔，到底还是名利场，一个个嘴上说着慷慨乐意，其实从来没把知识当作公有物，根本不是为了研究而研究、为了时间和空间上广泛的使用而改进，因为人快乐的时候是最好相处的。
只有完全靠好奇心和求知欲驱使才能叫象牙塔！

为什么要给自己喜欢的领域制造问题？技术、领域；难道不是用来解决问题的吗


看不起某些“大牛”说的什么“只有大公司做得起”。
不懂总结精炼知识，只知道用信息差赚不懂者的钱、收别人仰慕的目光，中国的各种实践就是因为这些夸夸其谈的学者才难以做到更好。

就用自己的语言！写完后世界都能用！