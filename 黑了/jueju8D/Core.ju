pkg jueju
use1 SomeEqv

for<T>fun `*`3(args:Ary)=as<Args>
for<T>fun T?.`?` :T? =VMOp
for<T>eval fun T?.`!!` :T = this ?: lets: throw ErrNull(asE.Str)
@_("空则")
for<T>fun T?.`?:`0(:Fn0<T>) = (this!=NO).way(as<T>,fn)


@Namely("i")
for<> Idx=Cnt4
for<> Int=Int4 //IntN in Py
for<> Rat=Rat8
for<> Cnt=Cnt4 //Cnt? NO==-1

for<T> eval fun Bool.way(Y:Fn0<T>, N:Fn0<T>) = if this: Y()
  else: N() //q? a:b
@_("非")
eval fun `!`(:Bool)=q.flip
/** $Yes or $No "q"uestion, `$Y|sayYes; $N&sayYes` does nothing(calc [byLazy]). [Flag],[Vec_Bool] */
/**: 真或假，`真或做；假且做` 啥都不做([值懒]算)。[旗],[向量_真假] */
@Namely("q")
thing Bool were CanSort,NumLike.Flip:
  @Below(3+1, "_(:Bool):Bool=VMOp")
  fun `&`3
  fun `|`3
  fun xor
  !fun `==`3
  !fun Str=way("$Y","$N")
  same-insta:
    !val normalOrd=VMOp


@Namely("p")for<T> FnTest=Fn1<T,Bool>
@Namely("c")for<R> FnCont=Fn1<R>
for<T> Fnew=Fn1<T,T>
for<T> FnSort=Fn2<T,T,Sort>

for<T> T.as=FnTest: you==this
for<T> T.as=Fn0: this

// scope fun
@Below(4+3,"eval")
for<AR> fun A.let(:Fun1):
  fn(); return this
for<AR> fun A.lets(:Fun1)=fn()
for<TR> fun A.itLet(:Fn):
  fn(this); return this
for<TR> fun A.itLets(:Fn)=fn(this)

@_("取否")
for<T> fun T.takeIf(:FnTest) = p(this).way(this,NO)
for<T> fun T.test(cases:Fun1<T,Bool>)=cases()
for<T> fun Var.`sets`(:Fnew<T>):
  v=fn(v)

for<T> fun Vars.Named.swap(a:Var,b:Var):
  val v0=a; a.v=b; b.v=a0
for<T> fun Vars.Named.with(set:Pair<Var,T>)=set.itLets:[==v to need]
  val v0=v; v.v=need
  CanClose: v.v=v0

/** Any?=Any+NO: `null`, nullptr or None
  Any value(!=null) provided to fun-[Args]ument and val/vars, maybe const literal, system registry or user input.
  expr and its subexpr/vars comes with 1 value&type. types are implicitly `:(extends) Any` and canBe(it's subtype) [Break] */
/**:
  值?=值+空: `null`, nullptr 或 None
  事参数和变量接受的任意(非空)值。可能由常量字面、系统登记或人类输入。
  算式及其子式/单量“的去”都有1值和其类型。任何物类隐式 `：(属于) 值` 且可为(即:有子类) [断止] */ 
impl? thing Any:
  /** Test content equality(provided any!=NO), see [CanSort]: math rules, [Vars]: memAddr equality */
  /**: 实现内容相等性，任何值!=空。数学性质见[可序], 内存地址相等见[变量集] */
  /** Brief obj(&inners), rarely used outside debugging(&[StrBuild]). Add :[Vars] for load/dump. precedence(0~3):'*', +, ~ ><, == & | */
  /**: 简述对象和其内项数据，很少在调试（和[文拼]）外有用。导入导出请加 :[Vars]
    算符优先级:小'*' 中+ 大>< 超大'是' 且 或。默认“中” 前后缀默认“小”且后=前-1=中-2 ，玩法: `1~2存于(3~4)`  */
  @_("是") @CopyInfix(_("不是 en !="))
  impl? fun `==`(:This):Bool = VMOp
  impl? fun Str:Str = VMOp
  /** Pregrouping key for optimizing [==] lookup, must pure(equals->sameHash)
    or [KV.get] becomes UB. Hashes are sparse like pseudo-[Random] */
  /**: 优化“靠 [==] 查表”的预分组线索，必须纯（相等->散列相同）
    否则 [表.取] bug。相邻值散列不扎堆这点像伪[随机] 但并非加解密 "[同一]" */
  impl? fun Hash:Int = VMOp

/** `Any` canBe `Str,Int,Ary`,. (`"" is Any`), if provided value implements([is]) [T] e.g. Str&you can't change type signature(e.g. Any), cast `any.as<Str>` is efficient
  for `int1.as<Int4>` widen, `int.as<Int1>` lose precision it's C-like(& lit-int=>float,Char!=Int2). for JVM APIs autoboxing `Ary<Int> == int[]` supported (slower). __"as" is retType-overloaded__ */
/** 值可为文,数,组,. 比如 `"" 属于 值`。若提供的值有实现([is]) [T] 如=[文]，且你不能精确化类型签名如[值]，强转 `此值去作<文>` 不慢
  在数1作数4 宽化、数4作数1 精度丢失 如同C语言族（但只有常量int=>float、[字]!=[数2]）。对JVM接口，支持略慢自动装箱如 `组<数> == int[]`。__此方法以返回类型重载__ */
for<T> eval fun Any?.as: T = VMOp
for<T> fun Any.asMay = is<T>.way(`as<T>`, NO)

/** Check if typeof this inherits [T], or have `class-insta T This`. `class: same-insta where XX: ` inherits, like [Empty]
  Such [Bool] infix supports `!is` and `when x is:` syntax. "type" is statically(compiler-time) known part whatever (func)value, or "def" order is, faster&safer */
/** 检查值的类型是否继承[T]全员，或有 `我类型.作：T`。 类的无名同名例会被继承如 [值空]。
  有 `不属于` 和 `判x属于，` 语法。值的类型/型参静态(编译时)已知，无论值由谁何时提供，比弱类型快速而安全  */
@_("属于")
for<T> eval fun Any?.`is`2: Bool = VMOp
@_("存于")
for<T> fun T.`in`2(set:Seq<T>) = set.contains(this)
//[CoreRange]: +- ><

for<AB> A.`to`(:B) = Pair(this,b)

for<getA getB> eval data-thing Pair(A:A,B:B) were Vars:
  fun Seq=lineOf(A,B)
  !fun toStr="$A:$B"
for<getA getB getC> eval data-thing Pair3(A:A,B:B,C:C) were Vars:
  fun Seq=lineOf(A,B,C)
  !fun toStr="$A,$B,$C"

@Compiled("bidir(-1,NO,$N,$Y)")
for<> Bool3 = Bool?

for<T>eval when-thing Omit(:Fnew<T>):
  same-insta were Omit(`it`):
    fun `-`(:N)=Omit:it-n

for<T> PairOf=Pair<T,T>
for<T> PairOf3=Pair3<T,T,T>

@BelowFor("`({'T'}+('B'~'H') )(Fold.From("",{+" set"+it}).eachStep)` `$1.Seq`")
for<$1 getR> class Fn$0:
  fun wasCall(:$2): R

@Below(8, "@jueju.words.JuFun")
// [*-* ~](~  ^_^)
for<AR>Fun1=Fn1<A>
for<ATR>Fun2=Fn2<A,T>
for<ATBR>Fun3=Fn3<A,T,B>
for<ATBCR>Fun4=Fn4<A,T,B,C>
for<ATBCDR>Fun5=Fn5<A,T,B,C,D>
for<ATBCDER>Fun6=Fn6<A,T,B,C,D,E>
for<ATBCDEFR>Fun7=Fn7<A,T,B,C,D,E,F>
for<ATBCDEFGR>Fun8=Fn8<A,T,B,C,D,E,F,G>


/** typeof `throw` or [Exec.exit], never has value so anything canBe Break. `Any?<T<Break` in memberSet */
/**: `抛下` 和 [进程.结束] 的类型，不返回值故任何类型可为断止。词(成员)数上 `值?<T<断止` */
impl! thing Break
/** Instrinic stub, impls are inlined */
same-pkg val VMOp get: TODO()
/** TO distinguish int & Integer(e.g. how Ary<Int> => JavaAry<Int> => Integer[]) , key on VMT changes */
same-pkg impl?? thing VMT

/** Compile-time known expr list, use it for const expansion or destruct */
for<T> eval thing Args where Ary<T>
/** `fun pair(:ArgsName<Str, 2 to "ab"> )` */
for<TK>(K: eval, K: Pair<Int,Str>) eval thing ArgsName where Args<T>

ArgsOf

for<This> impl?? thing Enum
  same-type made(name: String, ordinal: Int) were CanSort:
  same-insta:
    for<E>(E:Enum) fun get(name:Str)=VMOp

for<E This>(E:Flag.Bit) thing Flag(var bits=Cnt.ALL_ONE.bits) were Empty:
  fun set(:E,q:Bool)=bits set: q.way(it+e, it-e)
  fun get(:E)=bits&e.mask

  for<This>thing Bit(i,name,mask=2**i) were Enum:
    fun `+`(:This)=Bit(i,name+you.name,mask+you.mask)
  same-insta:
    !fun empty=Flag(0)
    for<E>(E:Enum) fun full=Flag()

for<E>(E:Flag.Bit) Ary<E>.as=this(Fold.To(Flag(0)): set(it,$Y) )

/** Load/dump(cat cut) repr of val into mem, `Eqv/2+1`. [EqvOf] */
for<AB> thing Eqv(cat:Fn1<A,B>, cut:Fn1<B,A>):
  fun flip=Eqv(cut,cat)
  /**`oncut(x,noOp)==x`*/
  fun oncut(it:A,:Fnew<B>)=cut(fn(cat(it)))
  for<T>eval-thing At(pipe:EqvOf<T>):
    for<R>fun `+`(work:Eqv<T,R>)=work.lets:eq(cat,cut)
    for<R>fun eq(cat:Fun1<T,R>, cut:Fun1<R,T>)=At(Eqv({cat(pipe.cat(it))}, {pipe.cut(cut(it))}))
  for<T>same-insta were At(noOp):

for<N>insta SomeEqv:
  fun EN.`+`(:N)=eq({this+n},{this-n})
  fun EN.`-`(:N)=this+-n
  fun EN.`*`(:N)=eq({*n},{/n})
  for<Rat>fun Eq<Rat>.`/`(:Rat)=*(1/n)
  for<TR>fun Eq<Seq>.`/`(:Eqv<T,R>)=eq({seen(e.cat)}, {seen(e.cut)})

  fun Eq<Str>.sep(:Str)=eq({split(str)}, {joinStr(str)})
  for<T>(T:Flip) Eq.not=eq({flip},{flip})
  for<KV> fun KV.as=Eqv(`get`, flip`get`)

  for<Int>fun Eqv<Str>.int(base=10)=eq(`Int(base)`,`Str`)
  fun Eq<Str>.surr(a:Str,b="")=eq({split(str)}, {joinStr(str)})
  /** pos L:(0)"1.23e2", toPrecision; R:(0)toLocal, toFixed */
  for<Rat>fun Eqv<Str>.num(fix=1, of:Pos=Right)=eq(`Rat`,`Str`)
  fun Eq<Any?>.fmt(:Str)
  for<Int>fun Eq<Int>.digit(bases:Args<Int>)
where:
  for<T>Eq=Eqv.At
  for<>EN=Eq<N>


for<T> EqvOf=Eqv<T,T>
for<T> val EqvOf.cats=Eqv(cat,noOp)
for<T> val EqvOf.cuts=Eqv(noOp,cut)


/**: `物事 JVM.作：独有实现` juec可见全部语言内类型签名，但只生成当前平台的调用。其内物事受调用()能覆盖 `终定` 成员以提供造于()和常量等 继承时合并代码 */
class Platform



fun collapse(editorOpen=0, :Fn0):
  if editorOpen: fn()
fun TODO(reason="having a rest") were Break:
  throw ErrNoImpl(reason)
fun error(msg:Str): Break = throw ErrVars(msg)
@_("试做")
for<R> fun trys(:Fn0<R>) = try { Res.Ok(fn()) } catch(CanThrow) { Res.Err(you) }

fun require(msgr: Fn0<Str>, q:BoolAnds):
  if you q() !empty: throw ErrArg(msgr()+". "+you.joinStr())
/** Uses [assert] for testing */
fun check(msgr: Fn0<Str>, q:BoolAnds):
  if you q() !empty: error(msgr()+"! "+you.joinStr())
/** use `it!!` for notNull */
for<T> fun requireNot(value: T, msgr: Fn0<Str>, it: T?)=it.let: require(msgr,{!=value})
for<T> fun checkNot(value: T?, msgr: Fn0<Str>, it: T?)=it.let: check(msgr,{!=value})


- main
  say("")
  say(add(40,2))
^now
  - add'ab'=a+b

- main(n=30)
  say("$n 以内质数")
  (2~n):[x]
    (2~log2(x)) { x%this!=0}:
      say(this, end=(!=n-1) {", "}{""})


- main
  N2(.07,.15).delta: plot(0+~1.5 dx, 0+~1.5 dy):[x y]
    at a=x*x+y*y -1
    a**3<x**2+y**3
^now
  - plot(X:Rn,Y:Rn, fn:Fn2<N N Bool>)
    Y:[y]say(); X:[x]say(end=fn(x,y) {"@"}{""})

data BF(code="",pc=0, mem=Ary<Int1>(3_0000),pos=0)
  - as()
    at n=code.len
    loop pc!=n:
      when code [pc.goesR]:
        '>': pos={+1} ; '<': pos={-1}
        '+': mem[pos]={+1} ; '-': mem[pos]={-1}
        '[': mem[pos]==0{cont(+1)}
        ']': mem[pos]==0{cont(-1)}
        '.': say(mem[pos].AZ)
        ',': TODO"read byte"
  - cont(inc=1) @our
    at now: i inc
    loop i!=0:
      pc={+inc}
      when code[pc+inc]:
        '[':i.goesR ; ']':i.goesL
        

data S1(a:Int)
data S2(a:Int)
  
type In1
  - f
  
data- S1 as In1
  - f=say(a)
data- S2 as In1
  - f=say(a)
  
- main
  S1(13).f
  S1(42).f
  at fn=Fun1<In1>: f()
  S1(42).fn


可为 可同 可变
像队 像栈 像链 可多//指针
像树T 像树根 像图E(dot,自)

言级语法和括号树雷同-以逆波兰带[参数组]保存，但若判/空则 可含 此停下[^0起] 形式流控：正如 你=我[^1]。 a?去f? 提为变量,译为连续if,最后转嵌套if。事 编译(算式)：另语式

言单是值的子集&“恒量” 数文空字真假 。`字("UTF16")：同一` 以编码，""去行 以切分， `文，re'.*\n'于'g'。 ("输入")?首` 以正则，也有文.换(到)/切(计)。re 类同ES6的反引号调用


事量物例类 公私族组内
储标例判造 既可未终定
令滤序带叠 行表组集列
记作变量表 恒判存函续

物如狗、门户、车辆为大类，类如可写、可闭、可比为小类。 类型指明了至少要拥有的事和量
- __物thing、例insta、物事thing-fun(innerclass)__ 皆为类型，可继承1大类 N小类，默认自值、至断止
- __类class__ 可混合N小类，事量皆“未定”或 `=默认` 而可定。 `未定的物` 才能含此种事量(要继承可见性,或公开)
- __同名例samename-insta__ 的 `事 受调用` 是 `狗("旺财")` 等new调用的本质
- “静态方法”有强类型。 `对何<T>(T：可闭) 量 T.「$」读，同名例<T>去闭。` ， `对何<我> 类 可比.. 事「<」(：我)：真假`
- `物 T(x：T0)：值继承<T0>(x)` 宏展开为“T0事量由x代理”，`量 lateinit：数=值晚` 断言非空。 `值懒，lazy。 值改，“可改<T>变更通知”。`

对于子类创建，绝句提供2种语法糖，前者在“不继承数据”时好用
- `物 Main Activity()` ，去掉'：' 就可以不加大类名后缀 。函数签名自动继承类型和默认值
- `物事 点2D.矩形(wh：俩量)` 的大类默认为 `点2D(同名变量)` ，内部语句集至 `事 受初用`

对于初始化，有3层语法糖
- `事 受造` 即 `class A{/**/ {this.x=1;}}` init块。以 `我去作<值>去造于` super调用
- `造于(：数)=造于("$此数")` made构造器，只能写等号而不同于 `量= “或”量 读，。`
- `物 A “造于”(x=0)`  主构造器（先调大类 造于()，故大类造于里 不应访问可定事量）

在实现上
- `函0~8<写A、...、读R“可选”>` 仅读写性(形变)有默认。也可用在 `组<写数>`、`对何<读A读B>储物 俩项`
- `造行(1+2L、"")` 通过将TypeVar() `<T>` 并集获知加法于数8、行于值。交集靠 `对何<T>(T：A、T：B、T：值?)`
- `量x=可变()` 代理 `x的值` 的读写函数，函数的闭包量也为 `可变.外<数4>()` 形式。如捕获 `(1~2)令，[i]fs添函「i」。` i变量
- `其中[^2]` 为上2个事添加书级定义，不独立作用域：__量/读写加在函数体头部，事 物事强制内联，对何<>别名=T 全局。禁止其他__

判你与判物
- `列Seq,可添CanAdd` 标记行表集可读/写，`改行RwLine` 和 `行` 属于 `_行<T>` 
- 匹配细分 `判是， a到b、判，a>0` 重复 回()


物事面向对象
- `物事 Activity.Main` 不利用 构造参数自动填写，则生成 `MainActivity` 与受初用
- `物事 Point2D.Rect(w_h：组参<数>)` 添加子类
- `物事 LList.作：迭<T>` 以“内部类”而不使用匿名对象

既有OOP的条理紧凑，又有FP的简洁明确和 struct trait-impl 的双边易扩充

cat cut
load dump
decode encode

$ juec (in out?'.'ext)*
$ juec (inMay':' )?js  '.'py?
default: py_zh_CN
inMay: file '-' w watch http
ver: 1.0 Node 19.3 pip 21.3
langs: ju js py kt rb cs ts_es5 java dryrun server
cultures: zh zh_CN en ja S s
cp: ~/.local/lib/jueju:/lib/jueju
env:
  - cc,cxx, web
  - JUE_DB: no
