pkg jueju.jvm
use java.lang
use java.io

class-insta DataItem JVM:
  fun lineOf==Fn.pipe(`listOf`, `KList`)
  fun kvOf==Fn.pipe(`mapOf`, `KMap`)
  fun setOf==Fn.pipe(`setOf`, `KSet`)
  for<T> eval fun aryOf(it: Args<T>)


@_("锁线程")
for<R> fun synchronized(noRace: Any, :Fn0<R>):R=VMOp

for<> CanClose=AutoCloseable
for<> CanThrow=Throwable

for<> Error=Error
/** Giving `jshell`&jueju why-errors. */
for<> Err=Exception

/** `assert 1+1==3` */ /** e.g. `Exec.prop["os.name"]=="BSD"` */
for<> ErrorAssert=AssertionError
for<> ErrorNoImpl=NotImplementedError
@Below(10, "Err_")
/**`URL("file:").openStream`*/ /** Every error "[Throws] unchecked" derives this */
/** `Map.of(null,0)` nokey. ":T=[later] not init" */
for<> IO=IOException
for<> Runtime=RuntimeException
for<> Null=KotlinNullPointerException
/** `URL("")`. NoWhenBranchMatched also this */ /** `f.close(); f.read()` */
for<> Arg=IllegalArgumentException
for<> Vars=IllegalStateException
/** `List.of().add(1)` */ /** `(int)(Object)""` */
for<> NoSupp=UnsupportedOperationException
for<> As=ClassCastException
/** `rw{lineOf(1,2)}.see: popAt(0)` */ /** `aryOf(0)[1]` */ /** `kvOf(0 to 1)[1]` */
for<> BadModify=ConcurrentModificationException
for<> GetAt=IndexOutOfBoundsException
for<> Get=NoSuchElementException
/** `Integer.valueOf("a",10)` */ /** `Thread.sleep((int)10e3)`&Ctrl+C SIGINT [Exec.thr] */ /** (int)`1/0` */
for<> Parsenum=NumberFormatException
for<> CtrlC=InterruptedException
for<> Calc=ArithmeticException

AnnotationFormatError：当注解解析器试图读取一个注解时，发现注解的格式不正确，抛出此错误。
BootstrapMethodError：当调用一个引导方法时，发现引导方法无法定位或执行，抛出此错误。
ClassCircularityError：当初始化一个类或接口时，发现类或接口的超类或超接口依赖于该类或接口的初始化，抛出此错误。
ClassFormatError：当Java虚拟机试图读取一个类文件并确定其格式无效时，抛出此错误。
ExceptionInInitializerError：当初始化一个类时，发生了一个异常，并且该异常没有被捕获，抛出此错误。
FactoryConfigurationError：当实现了Service Provider Interface的工厂无法配置正确时，抛出此错误。
GenericSignatureFormatError：当泛型签名格式不正确时，抛出此错误。
IllegalAccessError：当应用程序试图访问或修改一个字段或调用一个方法，但是当前执行线程没有访问权限时，抛出此错误。
IncompatibleClassChangeError：当执行某个类的定义发生了不兼容的改变时，抛出此错误。
InstantiationError：当应用程序试图使用new操作符创建一个抽象类或接口的实例时，抛出此错误。
InternalError：当Java虚拟机遇到了一个内部错误时，抛出此错误。
LinkageError：当链接一个类或接口发生了某种不一致性时，抛出此错误。这是一个抽象类，有以下几个子类：
  NoClassDefFoundError：当Java虚拟机或者类加载器试图加载一个类的定义，但是找不到该类的定义时，抛出此错误。
  ExceptionInInitializerError
  IllegalAccessError
  NoSuchFieldError：当应用程序试图访问或修改一个字段，但是该字段在当前执行的类中不存在时，抛出此错误。
  NoSuchMethodError：当应用程序试图调用一个方法，但是该方法在当前执行的类中不存在时，抛出此错误。
  UnsatisfiedLinkError：当Java虚拟机无法找到或加载本地代码库（如.dll文件）时，抛出此错误。
  IncompatibleClassChangeError：serialVersionUID发生变化，
  BootstrapMethodError：MethodHandle 指定的静态方法不正确
  VerifyError：当Java虚拟机试图验证一个类文件，并确定其字节码不符合逻辑时，抛出此错误。
  ClassFormatError
  ClassCircularityError,InstantiationError

ServiceConfigurationError：当服务提供者配置文件违反了规范或者无法被读取或解析时，抛出此错误。
StackOverflowError：当应用程序递归调用过深导致栈溢出时，抛出此错误。
OutOfMemoryError：当Java虚拟机没有足够的内存来分配给一个对象或数组时，抛出此错误。
ThreadDeath：当调用Thread.stop方法终止线程时，抛出此错误。这是唯一一个可以被捕获和处理的 Error 类型。

UnsupportedClassVersionError：当Java虚拟机试图读取一个类文件，并确定其版本号不被当前版本的Java虚拟机支持时，抛出此错误。
VirtualMachineError：当Java虚拟机遇到了无法恢复的内部错误时，抛出此错误。这是一个抽象类，有以下几个子类：
  InternalError
  OutOfMemoryError
  StackOverflowError
  UnknownError



/** Add to multipart JuFile with [JvmName] */
/**: 添加到多文件class [Jvm名] */
@Target([FILE])
eval-thing JvmNFiles
@Target([FUN VAR VAR_GET FILE], runtime=$N)
eval-thing JvmName(k:Str)
@Target([FUN VAR VAR_GET VAR_SET])
eval-thing JvmStatic
/** For default args. f(a,b=1,c=3) +3 methods */ /**: 对默认参数 */
@Target([FUN MADE])
eval-thing JvmOverloads


enum-thing JvmFlags where Flag.Bit:
  Synthetic; Strictfp
  /** method will LOCK(single thread) on this */ /** won't serialize */ 
  /** writes are thread-safe(e.g. for ONCE-init lazy Singleton), use Atomics for read+write */
  Synchronized;Transient;Volatile

/** Don't make get/setter(for impl! var x=) */
/**: (终定量)不提供字段外的get/set */
@Target([VAR_MEM])
eval-thing JvmField
/** We don't force CheckedExceptions, but you can! */
/**: 绝句不要求API用户穷举报错case，但您能！ */
@_("将抛下")
@Target([FUN MADE VAR_GET VAR_SET])
eval-thing Throws(exTypes: Args<Type<CanThrow>>)
/** Stored in ClassFile, `juec` won't see those(but uses [JvmFlags.Synthetic] for `same-pkg`, which is "public") */
eval-thing JvmFlag(: Flag<JvmFlags>)

eval-thing Jueju1(
    /** class,file,synth,nfiles,nfile */ kind: Int = 1,
    s1: Ary<Str> = [],
    s2: Ary<Str> = [],
    sRel: Str = "",
    pkg: Str = "",
    flg: Int = 0)
