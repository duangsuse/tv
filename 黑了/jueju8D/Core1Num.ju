pkg jueju
use1 NumLike

for<T>(T:Flip) fun `-`(:T)=it.flip
for<T>(T:Flip) fun `+`(:T)=it
for<T>(T:Empty)fun empty=T.empty
for<T>(T:Sum) fun Seq<T>.sum=this(Fold.From(T.empty, `+`))
for<T>(T:Sum) fun Cnt.`times`0(repeat:T)=lets:
  var T x=from
  times{x=x+x};x

for<T>(T:NumEmpty) fun maxOf=T.rn.B
for<T>(T:NumEmpty) fun minOf=T.rn.A

thing NumLike:
  /** `-(-it)==it` */
  for<This>class Flip:
    fun flip: This
  for<This>class Sum were Empty:
    fun `+`1(:This)
  /** use `val: author now.User; n 0` for (Num) default init */
  for<This>class Empty:
    same-insta:
      fun empty: This
  for<This>class Sibling:
    val inc:This
    val dec:This
  for<This>class Num Empty:
    same-insta:
      val rn: ClosedRange<This>
      val bitsFull:This

  @_("分量同算")
  for<This T>class CalcEachIdx were Num,Sized,*:
    fun get(:Idx): Num<T>
    eval fun wasGet(k:Str): Var<num<T,k> <T>>
  where:
    eval fun num(:Type, k:Str)=when k.size:
      1: error("no $k in $type")
      2: Vec2; 3: Vec3; 4: Vec4
      else: VecN

'this'type CalcEachN Num
  - get(:Idx) Num
  ^now
    - num(:Type, k:Str)=when k.size:
      1:good
      or: bad

for<This>class Num were Sum,Flip,Sibling,NumEmpty:
  @Below(3,'_(:This):This')
  fun `*`0=VMOp
  fun `/`0=VMOp
  /** So use `val n==x**2` for sqrt, `val n==2**k` for log2 */
  fun `**`0R=Pow(this,you)
  fun `-`1=+(-you)

  for<This>thing-fun rem:
    fun wasCall(:This):This=VMOp
    fun `/`(:This)=this(you) to this[^1]/you

  /** Numerics represent by 2+4+8+.. Unlike [Num], `a&-b == a-b; a+(2a-a)==2a; a(shl=0)+a==a; a.xor(a)==0`, for ushr: [Cnt] */
  for<This>class Bit were Flip,Sum:
    fun `&`(:This)
    fun `-`(:This)=this&-you
    fun xor(:This)
    fun wasCall(shl:Int)


for<This> thing Int:

class Rat
  val `finite`
  val `NaN`
  samename-insta:


for<> Int1 = Int`$N`
for<> Int2 = Int`$N`

@BelowFor("4 8 N", 2+2)
fun Int1.as:Int$1
fun Int2.as:Int$1
fun Cnt1.as:Int$1
fun Cnt2.as:Int$1

@BelowFor("8 N", 1+1)
fun Int4.as:Int$1
fun Cnt4.as:Int$1
@BelowFor("I C", 1)
fun $1nt8.as:$1ntN

@BelowFor("8 N")
fun Rat4.as:Rat$1
fun Rat8.as:RatN



