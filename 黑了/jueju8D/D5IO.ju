@_("绝句.读写")
pkg jueju.io
/** computing/transfer chunk size, low-latency already. [say]&[hear] won't use this */
var Int bufferSize were 2**12 //1<<10==1024

/** Won't err when not opened, may not exclusive, `File("a").open: say(size)` replaces `finally`. [ErrIO] */
class CanClose:
  fun close
  same-insta:
    fun wasCall(all:Args<CanClose>)=CanClose: all.see{it.close}
for<TR>(T:CanClose) fun T.wasCall(:Fun1<T>) //=fn().let: close()
 = try { val r=fn(); close();r } catch(Throwable) { close(); throw you }

for<TR>(T:CanClose) fun T.wasCall(task:Fun1<T,Wait<R>>) = wait { task()!.let: close() }

/** Read/maybe write(get,add) stream like [Deque] but [IO_Int] optimized. `JSON<Line<Int>>(ioChar) let: add {1 2 3}; cut("[]")` */
for<T> impl? thing IO were CanClose:
  fun `add`(:T)
  fun get: T
  /** read() side still buf like `stdbuf -o0 -iL` [bufferSize]. [close] do this *//** Useful e.g. `less x.txt` pager; HTTP FileUpload */
  fun flush
  fun closeHalf(write=$Y)

  /** Get [raw] underlaying stream from Buffered/Decode/etc. `this` may unusable after IO on it's raw */
  for<S> thing BufLike were IO:
    fun raw: S

for<T> fun IO<T>.`adds`(ending:_1More<T>):
  ending.see(`add`); close()

for<T>(T:Vars) fun IO_Int.as: IO<T>
for<TE>(T:CanSee<E>, T:CanAdd<E>) fun IO_Int.as: IO<T>
fun Bytes.IO: IO_Int

for<> Bytes=AryN<Int1>
/** JDK:[InputStream]+JDK:[DataInput], byte position: [i], byteorder: [isLE] for "12" 2 first */
thing IO_Int were IO<Int>:
  var Cnt8 i
  var Cnt8 size
  fun add(:Bytes)
  fun get(to:Bytes)
  fun get(to:Bytes.Part)
  fun getOnce(to:Bytes): Cnt
  fun getOnce(to:Bytes.Part): Cnt
  fun codec(:Chars.Enc): IO_Char
  fun codec(:EqvOf<Bytes>): IO_Int
  var Bool isLE
  for<N>(N: Num.Bit) fun iCat = get(N.nByte)(Fold.From<N>(empty): bits(+8)+it)
  for<N>(N: Num.Bit) fun iCut(:N):
    add Ary(N.nByte, rev=!isLE):[i] n.bits&0xFF.bits(+i*8)
/** JDK:[Reader] */
impl? thing IO_Char were IO<Char>:
/** JDK:[BufferedReader] of lines */
thing IO_Str were IO_Char:
  fun add(:Str)
  fun get: Str




impl?? thing Random:
  fun bits(n:Cnt): Int
  fun bytes(:Bytes.View)
  fun YN: Bool
  fun Rat(rn=0~1.0): Rat
  fun Int(rn=0~1): Int
  fun Int8(rn=0~1L): Int8
  fun Rat4: Rat4


class BitConv:
  /** ratint(NaN) is pure */
  class Conv:
    val boolInt = Eqv(`it.way(1,0)`, `it!=0`)
    val charInt = Eqv(`it.code`, Char)
    val ratInt4: Eqv<Rat4,Int4>
    val ratInt8: Eqv<Rat8,Int8>
  class Base64:
    thing-fun wasCall(:Mode=Base, pad=$Y) were Eqv<Str,Bytes>:
      impl?? val bytes: EqvOf<Bytes>
    /** [Eqv.strChunk] for MIME linebreak */
    enum-thing Mode:
      MIME;URL;Base

thing-fun JVM.as were BitConv:
  insta were Conv:
    !val ratInt4=Eqv(Float`floatToIntBits`, Float`intBitsToFloat`)
    !val ratInt8=Eqv(Double`doubleToLongBits`, Double`longBitsToDouble`)
  insta were Base64:
    !thing-fun wasCall:
      val e=java.util.Base64 lets:
        when mode:
          Base: encoder to decoder
          MIME: mimeEncoder to mimeDecoder
          URL: urlEncoder to urlDecoder
      !val cat=e.A`encodeToString`
      !val cut=e.B`decode`
      !val bytes=Eqv(e.A`encode`, e.B`decode`)
    

/** Ways to get&change [FileInfo] and do [IO]. test abspath(relative to "/"): `File(fp).path==fp || fp==(File(fp)-File.roots[0]).name` */
for<This> impl? thing File(name:Str) were Tree,jueju.tool.FileInfo:
  /** mkdir: `(File/"out"/"").touch.up` */
  fun touch(mkdirs=$N) = let:
  fun openb(write:Bool3=$N) were IO_Int
  fun open(write:Bool3=$N) = openb(write).codec(Chars.enc)
  fun wasCall(write=$Y, mkdirs=$Y) = touch(mkdirs).open(write)

  val asDir: Tree? = takeIf:
  var isLink: Str?

  samename-insta were File("."):
    fun `cd`(pwd="~")
    /** `tmp("cache" to "")` for tmpdir */
    fun tmp(base_suf:PairOf<Str>, at=File("/tmp/"))
    /** New process fork() at [File.cd]&env by `sh`, pipe it's IO(see [PidFile]) *//** `sh: - (pipe('ls','head -n${1}') >>"file.txt") ` */
    fun `sh`(cmd:Str)=sh("sh","-c",cmd)() ; fun sh==Sh`let`
    fun sh(argv:Args<Str>): PidFile
    /** JDK:[ProcessHandle] *//** `ps -aux; htop` *//** self */
    fun pid(:Idx): PidFile
    val pids: Line<PidFile>
    val ``$0``: PidFile
    fun exitProcess(``$?``:Cnt8): Break
    /** `xx.{srt,mp4}`, `~/.log/2022-0{1..9}/**`, `"\$HOME/.{local,config}"` at `env["PWD"]` */
    fun expand(:Str, env=env): Line<Str>
    /** disk free()=(usable+mayReserved)/full */
    fun df(:File): Pair3Of<Cnt8>
    /** It's [File]s, UNIX have 1 root "/". *//** Text envvars *//** `char** environ = "k0=v0\0k1..";` */
    val roots: Line<Tree>
    val env: KVOf<Str>
    val envb: KVOf<Bytes>
    insta Sh:
      eval fun wasQuote(cmd:Pair3<Line<Str>,Line<Any>,Str>) = sh(*cmd.lets: A.zip(B).seenFlat{[==s to v]aryOf(s,v.Str)}+C )
      fun pipe(:Line<PidFile>): PidFile
      /** for <<<"str" use `sh: 'cat'() adds "str" ` *//** wait end, detach stdOE */
      fun PidFile.`<`(input:Str)
      fun `-`(wait:PidFile) = waitAll: wait(NO,$N); wait.end
      fun PidFile.`>`==reout(NO)
      fun PidFile.`>>`==reout($Y)
      @Argsep("1 1") same0 eval fun reout(w:Bool3, output:Str):
        File(output)(w)
/** Process with stdIOE bound when [open]. [close] kill&[exist] or [ls] acts as normal, `open(write=NO,mkdirs=$Y)` for detach stdO+redir stdE `2>&1`, or always piped */
thing Pid(id:Idx8) File:
  val err: IO<get Char>
  val end: Wait
  val ``$?``: Int



/** Deep `{a {b c}}` with (K=Str)-locable nodes. File=dir(0child)+[File.open], dirs can have time/owner/mode too! */
for<K This> class Tree:
  /** if is dir, depth=1 childs, or {}. *//** parent, multi: `5times(Fold.From(fp,{up}).eachRStep)` *//** test or `rm -rf` file */
  fun ls(glob="*"): Line<This>
  var This up
  var Bool `exists`
  fun `/`(sub:K): This
  fun `/`(sub:Seq<K>)=Fold.From(this):/it
  /** `app/(fp-app)==fp`, relpath */
  fun `-`(base:This): This
  fun pathMay(star:Str) = takeIf:


