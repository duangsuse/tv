pkg jueju.data
use1 java.util.Arrays

class Impl:
  insta were Vec_Bool.Named



/** [Line] with fixed size, not actually "Array" in JVM or tuple(`Ary<get T>`) in Py. see: unboxed [AryN], [Args] */
for<T This> impl? thing Ary where Sized,CanSee<T>, Copy,Vars<T>:
  fun get(:Idx): T
  fun set(:Idx, :T)
  /** Try to make 0-copy viewport(`subList`,.), or do [slice] */
  fun get(sel:Range<Idx>): This
  fun set(sel:Range<Idx>, :Seq<T>) = vs.toIdx.see: [==x to i] this[i]=x
  fun set(sel:Range<Idx>, fill: T) = set(seq, Seq.repeat(fill))

  !fun Seq=Seq.SIdx:
    fullIdx.see: got(this[it] to it)

  @Below(4, '''@SafeVariance("set T") ''')
  /** Reuse given [cmp] with new [ord], `a(MinAt0.by: it+1)` */
  fun wasCall(ord=Sort, cmp:FnSort)=VMOp
  fun reverse
  /** sequence randomly shuffled */
  fun shuffle(ran=Random())
  val vars = fullIdx.seen: this[it].as<Var>
  /** defaults to 0-copy. but for [filter], even dup2 is better than *inplace* Bubble Sort's slow */
  fun seen(set:Fnew<T>) = let:
    toIdx.see:[==x to i] this[i]=x.set()

for<T>(T:CanSort) fun Ary.wasCall(ord=Sort)=this(ord,T.normalOrd)
val N=OmitN()
for<T> eval thing-fun OmitN:
  fun get(iNeg:Int)=this[i].as<Var>
  fun wasCall(iNeg:Int)=(i<size).way(`this[i].as<Var>`, NO)
  where^2:
    val i=(iNeg<0).way(size+iNeg, iNeg)



@Compiled("boxedNum")
for<T>JavaAry=AryN
/** Prim typed array. [Seq] replaces parallel JDK:[spliterator] and JDK:[stream]. see JDK:[Arrays]
  On JVM [get] returns `int`, not `Integer` "boxed", `Ary<Int>` can't do this for it can be a [Line].
  Supports JVM `Object[]`, [JavaAry]: exposes int,. boxed on-heap (for reflect) */
for<T>eval thing AryN(n:Cnt, init:Fn1<Idx,T>) were Sized:
  fun get(:Idx):T =VMOp
  fun set(:Idx,:T)=VMOp
  !val size get: VMOp
  same0 fun wasInit:
    fullIdx.see: this[it]=init(it)
  fun as=T.isPrim.way(copyCast):asList(this).Ary
  same0 fun copyCast=fullIdx.seen: this[it]
  /** `[I@memAddr` didn't implement JDK:[Object], so always [asList]?? */
  !fun `==`(:AryN)=equals(this,you)
  !fun Str=toString(this)
  !fun hashCode=hashCode(this)
  fun wasCall(ord=Sort)=let: ord.onAsc{sort(this)}
  !fun get(:Range<Idx>)=Part(rn)
  fun set(:Idx,src:Part)=System.arraycopy(src.ary,src.rn.A, this,i, src.rn.size)
  val full=this[fullIdx]
  
  thing-fun deep:
    !fun `==`(you:AryN)=deepEquals(this[^1],you)
    !fun Str=deepToString(you)
    !fun hashCode=deepHashCode(you); val ary=you
  thing-fun Part(:Range<Idx>, pure=$Y) were ByImpl<AryN,you>:
    fun set(:Fn1<Idx,T>)=pure.way(parallelSetAll,setAll)(you,fn)
    fun copy=copyOfRange(you,*rn)
    fun copy(zfill:Cnt)=copyOf(you,zfill)
    fun fill(:T)=fill(you,*rn,it)

    fun wasCall(ord=Sort)=let: ord.onAsc { S(you,*rn) }
    fun wasCall(:FnSort)=let: S(you,*rn, fn)
    fun find(sorted:T)=binarySearch(you,*rn, sorted)
    fun find(sorted:T, :FnSort)=binarySearch(you,*rn, sorted, fn)
    fun sumLeft(:Fn2<T,T,T>)=parallelPrefix(you,*rn, fn)

    same0 val S=pure.way(parallelSort,sort)
    same-pkg val ary=you



/** Infinite line of bits. [Vars.sizeHint] */
for<This>
thing Vec_Bool same0 made(j:JBit) were Ary<Bool>,ByImpl<Any,j>, Num.Bit:
  impl?? made()
  !fun clear=j.clear
  !val size get: j.length
  !fun copy=BitSet(j.clone.as)
  fun count(q=$Y) = q.way(`cardinality`): size-count()

  !fun get==j`get`; !fun set==j`set`
  !fun get(:Range<Idx>)=BitSet(j.get(*rn))
  !fun set(:Range<Idx>, q=$Y)=j.set(*rn,q)
  @BelowFor("next; previous R")
  fun find$2(at:Idx, bit=$Y)=bit.way(j`$1SetBit`, j`$1ClearBit`)(from)+at
  fun flip(:Idx)=j.flip(i)  

  !fun `&`(:BitSet)=let: j.and(you.j)
  !fun `+`(:BitSet)=let: j.or(you.j)
  !fun `-`(:BitSet)=let: j.andNot(you.j)
  /** Flip only [you]r bits */
  !fun xor(:BitSet)=let: j.xor(you.j)
  !fun flip(rn=fullIdx)=j.flip(*rn)
  !fun wasCall(shl:Int)=let:
    ((shl>0).way(0,shl)~NO).see{[i] this[i]=this[i+shl]}

  impl?? samename-insta:
    val bytes=-Eqv<BitSet>(`it.j.toByteArray`, JBit`valueOf`)
    val int8s=-Eqv<BitSet>(`it.j.toLongArray`, JBit`valueOf`)

thing-fun JVM.as were Impl:
  !insta Vec_Bool:
    !fun wasCall==empty
    !fun sizeHint(n:Cnt?) = Vec_Bool(JBit(n!!))
    !fun empty=Vec_Bool(JBit())
where^2:
  for<>JBit=java.util.BitSet

