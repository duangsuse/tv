pkg jueju

impl? thing Any:
  @CopyInfix("!=")
  fun `==`(:This): Bool = VMOp.eq
  fun Str: Str = VMOp.objStr
  fun Hash: Int = VMOp.objID
  for<T> eval fun as: T = VMOp.checkcast
  for<T> eval fun `is`: Bool = VMOp.instanceof

/** Instrinic stub, impls are inlined */
same-pkg impl?? thing VMOp
/** TO distinguish int & Integer(e.g. how Ary<Int> => Integer[]) , var on VMT changes */
same-pkg impl?? thing VMT

@Below(3, '''eval ''')
for<T> fun Any.asMay = is<T>.way(`as<T>`, NO)
for<T> fun T.`in`(set:CanSee<T>) = set.contains(this)

for<TR>(T: AutoCloseable) fun T.use(:Fn1<T,R>): R
for<R> fun synchronized(noRace: Any, :Fn0<R>): R

fun TODO(reason:Str="") = throw ErrNotImplement(reason)

fun require(q:Bool, msgr: Fn0<Str>)
for<T> fun requireNot(it: T?, value: T?, msgr: Fn0<Str>): T

/** JVM this generates assert */
fun check(q:Bool, msgr: Fn0<Str>)
for<T> fun checkNot(it: T?, value: T?, msgr: Fn0<Str>): T

/** [Line] with fixed size, not actually "Array" in JVM or tuple(`Ary<get T>`) in Py. see: unboxed [AryN], [Args] */
for<T This> class Ary where Sized,CanSee<T>, Copy,Vars<T>:
  fun get(:Idx): T
  /** Try to make 0-copy viewport(`subList`,.), or do [slice] */
  fun get(sel:Range<Idx>): This
  fun set(:Idx, x:T)
  fun set(sel:Range<Idx>, vs: Seq<T>) = vs.toIdx.see: [==x to i] this[i]=x
  impl fun see(op: Fn1<T>): fullIdx.see { op(this[it]) }
  samename-insta Impl:
    /** Native impl for `T[]` type&VM operators. */
    for<T> fun wasCall(n:Cnt, init: Fn1<Idx, T>): AryN<T> = aryOfZero(n).let:
      fullIdx.see: set(it, init(it))

  @Below(4, '''@SafeVariance("set T") ''')
  fun sort(ord:Sort=MinAt0, cmp:Fn2<T,T,Sort>)
  fun reverse
  fun shuffle
  val vars = seenLine: this[it].as<Var>
  /** defaults to 0-copy. but for [filter], even dup2 is better than *inplace* Bubble Sort's slow */
  fun seen(set:FnNew<T>) = let:
    toIdx.see:[==x to i] this[i]=x.set()

@BelowFor('''1 2 4 8; byte short int long''')
class-insta WasConvert Ary<Int$1>:
  eval fun as==t(VMT.$2)
@BelowFor('''4 8; float double''')
class-insta WasConvert Ary<Rat$1>:
  eval fun as==t(VMT.$2)
/** UTF-16(short) '\x00' num in JVM. btw J=long,Z=bool,L=typeID in bytecode */
class-insta WasConvert Ary<Char>:
  eval fun as==t(VMT.char)
class-insta WasConvert Ary<Bool>:
  eval fun as==t(VMT.boolean)
for<T> class-insta WasConvert Ary<T>:
  eval fun as==t(VMT(T))

@ArgSplit({1 1})
same0 eval fun t(:JType, a:Ary<*>): Ary<type.ju>:
  val b=VMT.array(type, a.size)
  a.toIdx.see:[==x i] b[i]=x.as<type.ju>
  return b


/** Disable "you" in scope with two "this" having same `@X` base-type(`@DslMarker X`) */
@Target({THING_ANOTE})
anote-thing DslMarker

/** Hide member when don't match e.g. "set T" or T itself, see [Ary.sort]. try `as<Ary<@UnsafeVariance T>>` */
anote-thing SafeVariance(decl:Str)
/** Suppress conflict of typearg variance */
@Target({ARG_TYPE})
anote-thing UnsafeVariance

/** Unify to guess T `List<T>` with it's `add(1); add("")` calls in block, works in `Seq: got(1)` */
@Target({ARG})
anote-thing YieldInference

anote-thing Deprecated(msg:Str, replaceWith: ReplaceWith = ReplaceWith(""), level: DeprecationLevel)
anote-thing Suppress(kind: Ary<Str>)
enum-thing DeprecationLevel:
  Warn; Err; Hide
@Target({})
anote-thing ReplaceWith(expr:Str, use:Str)

/** Mark Fn as Fun extension, members and Fun(Fn) vars are resolved before extXXX(:This,...) funs */
@Target({TYPE})
anote-thing JuFun
anote-thing Jueju1(
    /** class,file,synth,nfiles,nfile */ kind: Int = 1,
    s1: Array<String> = [],
    s2: Array<String> = [],
    sRel: String = "",
    pkg: String = "",
    flg: Int = 0)


for<TR>(R:CanSort) fun Ary<T>.sortBy(ord:Sort=MinAt0, key:Fn1<T,R>) = sort(ord):[a,b] key(a).compare(key(b))
for<T>(T:CanSort) fun Ary<T>.sort(ord:Sort=MinAt0) = sortBy(ord,noOp)

for<T> class-insta WasDestruct Vars<T>:
  eval fun destructBy(:Vars<Var<T>>):
    val hole=you.vars
    hole.toIdx.see:[==x to i] hole[i].v = vars[i].v

for<KV> class-insta WasDestruct KV<K,V>:
  eval fun destructBy(:KV<K,Var<V>>):
    kv.see:[==k to v] kv[k].v = this[k]

// no size-hint, hash(v)!=hash(k) so nBuckets may diff
for<KV> fun KV<K,V>.flip = rw{kvOf<V,K>()}.let: you.see {[==k to v] set(v,k) }

same-pkg for<T>
class Line_ where Ary<T>:
  fun `+`(:This) = (+this)+you
for<T> Line = Line_<get T>

for<T> class RwLine where Line_<T>, CanAdd<T>:
  fun popAt(i:Cnt): T
  fun addAt(i:Cnt, xs:Ary<get T>)
  thing-fun Deque(newer:Sort=MinAt0) where Deque:
    impl fun pop = popAt(when newer:
      MaxAt0: lastIdx
      MinAt0: 0
      Eq: Random(fullIdx))
  /** Tamper `this` list, so never realloc for huge lists */
  fun filterHere(keep:FnTest<T>) = lets:
    var i 0
    see { if keep(it): this[i]=it; i=i+1 }
    get(0~i)

/** May asList(for int[] do copy) to `Ary<T>`. On JVM [get] returns `int`, not `Integer` boxed,
  `Ary<Int>` can't do this for it can be a [Line]. Supports JVM `Object[]`, or [T]: Int,. for typed array */
for<T> eval thing AryN where Ary<T>
/** Compile-time known expr list, use it for const expansion or destruct */
for<T> eval thing Args where Ary<T>
/** `fun pair(:ArgsName<Str, 2 to "ab"> )` */
for<TK>(K: eval, K: Pair<Int,Str>) eval thing ArgsName where Args<T>

/** ord:[Sort], MaxAt0=LIFO=Stack, MinAt0=FIFO=Pipe, Eq=unorder; can be fixed-size [RingDeque] */
for<T>class Deque where Sized:
  fun add(x:T); fun pop: T
  fun Seq = Seq: size**{ got(pop()) }

/** Ranged data, no get() or see() funs for [Set], [weak.Set] with only a size */
class Sized:
  val size: Cnt
  val `empty` = size==0
val Ary<*>.lastIdx: Idx = size-1
val Ary<*>.fullIdx = 0~lastIdx

enum-thing Sort(sign:Int):
  MinAt0(-1); MaxAt0(+1); Eq(0)

/** Type with comparator. to sort [compare] must: 0. not random (pure) 1. a=b&b=c&a=c (refl,identical & transitive) 2. a>b & b<a (!symmetric) */
for<This>class CanSort:
  fun compare(:This): Sort


for<This> class Empty:
  samename-insta:
    fun empty: This
for<T>(T: Empty) eval fun empty = T.empty

/** Well generated copy-constructor(can be override), not mark-as `Cloneable` & [Object.clone]. see serialize [BySend] */
for<This>class Copy:
  fun copy: This
for<T> fun `+`(old:Line<T>) = +old.as<RwLine>
for<KV> fun `+`(old:KV<K,V>) = +old.as<RwKV>
for<E> fun `+`(old:Set<E>) = +old.as<RwSet>
for<M>(M:Copy) fun `+`(old:M) = old.copy()

for<T This>(This: Empty) class CanAdd where Copy:
  fun add(x: T)
  fun pop(x: T); fun clear()
  fun `+`(xs: Seq<T>) = let: xs.see(`add`)
  fun `&`(xs: Seq<T>) = see { if it !in xs: pop(it) }
  fun pop(xs: Seq<T>) = xs.see(`pop`)
  fun copy = empty().itLet: see(it`add`)

/** `Collection<E>` = [Sized]+[CanSee], no more `Iterable` s cause `impl fun ` [see] implies async Seq */
for<T> class CanSee:
  fun see(op: Fn1<T>)
  for<R> fun seen(op: Fun1<T,R>) = rw{lineOf<R>()}.let { you.see: add(it.op()) }
  fun contains(x: T)
  fun contains(xs: Seq<T>) = xs.all: it in this
  /** Turn to iterator that can be async&infinite. `{1 2}.Seq.itLet: it()==1 and !it.done` */
  fun Seq: Seq
  /** Copy items */fun Line: Line
  /** Unique items */fun Set: Set
  for<KV> fun KV(to:WKV<K,V>=empty, assoc: Fn1<T,Pair<K,V>>) = to.let:
    you.see: add(assoc(it))
  for<K> fun KVBy(to:WKV<K,T>=empty, key: Fn1<T,K>) = to.let: you.see { set(key(it), it) }
  for<V> fun KVTo(to:WKV<T,V>=empty, value: Fn1<T,V>) = to.let: you.see { set(it, value(it)) }
  for<R> fun wasCall(:Fold<T,R>) = fold().lets:
    see { got(it) } done()
  for<R> fun wasCall(:Fold.From0<T,R>) = fold().lets:
    val x = Seq()
    acc = x()
    x.see { got(it) } done()
  for<KR> fun wasCall(:Fold<T,R>, groupBy:Fn1<T,K>) = KVFold(fold,groupBy)

  fun single: T?

  val it=fwd(noOp)
  val rev=reversed.fwd: it.reverse()
  thing-fun fwd(:Fn1<RwLine<T>>):
    fun first(p:FnTest<T>): T?
    fun take(n:Cnt)
    fun drop(n:Cnt)
    fun takeWhile(head:FnTest<T>)
    fun dropWhile(head:FnTest<T>)
    fun gets(:Idx): T?

  fun partition(:Idx)
  fun partition(div:FnTest<T>)
  fun filter
  fun filterNot
  for<T> fun filterIs() = rw{lineOf<T>()}.let: you.see { if it is T: add(it) }

  fun `all`==pred($Y,`&`)
  fun `any`==pred($N,`|`)
  fun joinTo(:CanAdd<Str>)
  fun joinToStr
where:
  for<KV> WKV=RwKV<set K, set V>
  @ArgSplit({2 2})
  for<T> eval fun pred(q:Bool, qq:FnJoin<Bool>, xs:CanSee<T>,p:FnTest<T>) = xs(Fold.From(q): qq(this, p(it)) )

for<TR> fun Ary<T>.wasCall(:Fold.From0<T,R>) = fold().lets:
  acc = this[0]
  (1~lastIdx).see { got(this[i]) } done()
for<TR> fun Ary<T>.foldRight(:Fold<T,R>) = fold().lets:
  (fullIdx step -1).see { got(this[i]) } done()

for<KV> fun CanSee<Pair<K,V>>.find(p: FnTest<V>): K?:
  see { if p(B): return A }
  return NO

for<V>(V: CanSort) fun CanSee<V>.sorted = Line().let: sort
for<V> fun CanSee<V>.reversed = Line().let: reverse

for<AB> fun Seq<A>.zip(b:Seq<B>) = seen { it to b() }
for<AB> fun CanSee<Pair<A,B>>.unzip = rw{lineOf<A>() to lineOf<B>()}.let:
  see:[==a b] A.add(a); B.add(b)
for<V> fun CanSee<CanSee<V>>.flat = rw{lineOf<V>()}.let:
    you.see:[a] a.see { add(it) }

same-pkg for<K get V>  // in KV.funs V can't be arg, diff to RwLine<V>
class KV where Sized,CanSee<Pair<K,V>>:
  fun get(:K): V?
  val keys: Set<K>
  val vals: Set<V>
  fun contains(:K)


for<KV> class RwKV where KV<K,V>,CanAdd<Pair<K,V>>:
  fun set(:K,:V)
  fun pop(:K): V?
  fun setIfNo(:K, calc:Fn0<V>):
    if k !in this: this[k]=calc()
  fun `+`(:This) = copy().let:
    you.see: [==k v] this[k]=v
  fun `&`(:This) = (keys&you.keys).KV: [k] k to (this[k] to you[k])
  fun `-`(:Set<K>) = (keys-set).KV: [k] k to this[k]
  data-thing Entry(var :K,:V)
  val entries: RwSet<Entry>

for<get E> class Set where Sized,CanSee<E>:
  fun `+`(:This) = copy().let:
    you.see: [==k v] this[k]=v
  fun `&`(:This): This
  fun `-`(:This): This

for<NV> thing KRangeV where RwKV<Range<N>,V>:
  fun get(:N): V?
  /** Ray(abv): ByImpl<Sorted>(a) */
  val entries = SetSort<Pair<Range<N>, V>>: A.A

/** Make a grouping, can then apply multi [folds]. `eachCount = KVFold(Fold.From(0):it+1): it` */
for<KVR> thing KVFold(:Fn0<Fold<V,R>>, key: Fn1<V,K>) where RwKV<K,R>,Fold<V,This>:
  impl fun got(:V): setIfNo(key(v), fold).got(v)
  impl fun done=this

  impl fun see(op:Fn1) = see:[==k to v] op(k to v.done())
  impl val vals get: vals.seenTo(): v.done()
  impl fun get(:K) = get(k)?.done()

for<KVR> fun KV<K,CanSee<V>>.folds(todo:Fn1<K, Fold<V,R>>) = KVTo: B(todo(A))

/** Known as `Collector` in Java8 but don't do [Seq.filter], etc. */
for<TR> Fold = Fn0<Foldy<T,R>>
for<set T get R> class Foldy:
  fun got(x:T); /** able call twice */ fun done: R
  fun only(p: FnTest<T>) = pipe { if(p(it)) got(it) }
  for<O> thing-fun then(op:Fn1<R,O>) where Foldy:
    impl fun got(x:T)=you.got(x)
    impl fun done=op(you.done())
  thing-fun pipe(op:Fun2<Foldy,T>) where Foldy:
    impl fun got(x:T)=you.op(x)
    impl fun done=you.done()
  /** runningFold or scan in Kt */
  fun eachStep

  /** `{1 2 3}(Fold.From(0):it+1)` 0-cost like just `var n:Int`, Jueju packs `Type` for 1-var eval things, never `new` */
  for<A> eval thing From
    same0 made(inc: Fun2<A,T, A>, end: Fn1<A,R>, var acc:A) where Foldy:
    made(acc:A, inc:Fun2, end:Fn1)=made(inc,end,acc)
    impl fun got(x:T): acc=acc.inc(x)
    impl fun done = end(acc)
  eval fun From(acc:T, inc: Fun2<R,T, R>) = From(acc,inc,noOp)
  for<A> eval thing From0(inc: Fun2<R,T, R>) where Foldy:
    var acc: R; impl fun done = acc
    impl fun got(x:T): acc=acc.inc(x)
  eval thing To(dst: R, add: Fun1<R,T>) where Foldy:
    impl fun done = dst
    impl fun got==dst`add`
  eval thing To0(dst_0: Fn1<T,R>, add: Fun1<R,T>) where Foldy:
    var dst: R?
    impl fun done = dst
    impl fun got(x:T):
      if dst==NO: dst=dst_0(x)
      else: dst.add(x)

  thing-fun strBuild where Foldy:
    val sb=StrBuilder()
    impl fun got==sb`add`
    impl fun done=sb.toStr
  thing-fun avg where Foldy:
    var: n 0; sum 0
    impl fun got(x:N): n=n+1; sum.set`+x`
    impl fun done=Pair3(sum/n, n,sum)

  for<N> data-thing MinMax(var a:N, b=a):
    fun got(x:N):
      if x<a: a=x
      if x>b: b=x
  for<N>fun minMax=To0(`MinMax`): got(it)

class-insta Empty Line:
  impl val empty=listOf()
class-insta Empty RwLine:
  impl val empty get: RwData.listOf()

class-insta Empty KV:
  impl val empty=kvOf()
class-insta Empty RwKV:
  impl val empty get: RwData.kvOf()


class DataItem:
  for<T> fun lineOf(it: Args<T>): Line<T>
  for<KV> fun kvOf(it: Args<Pair<K,V>>): KV<K,V>
  for<T> fun aryOf(it: Args<T>): Ary<get T>
  for<E> fun setOf(it: Args<E>): Set<E>

same-pkg class DataRw:
  for<T> fun lineOf(it: Args<T>): RwLine<T>
  for<KV> fun kvOf(it: Args<Pair<K,V>>): RwKV<K,V>
  for<T> fun aryOf(it: Args<T>): Ary<T>
  for<E> fun setOf(it: Args<E>): RwSet<E>
fun rw==RwData.lets


class JVM where Platform:
class JS where Platform:
class AOSP where JVM:

class-insta DataItem JVM:
  fun lineOf==Fn.pipe(`listOf`, `KList`)
  fun kvOf==Fn.pipe(`mapOf`, `KMap`)
  fun setOf==Fn.pipe(`setOf`, `KSet`)
  for<T> eval fun aryOf(it: Args<T>)

for<T> thing Wait:
  fun wait(c:FnCont<R>)
  samename-insta:
    for<T> fun got(now: T) = wait: got(now)
    for<E> fun all(:Args<Wait<E>>) = wait:
      if n==num: got()
    for<E> fun allMay
    for<E> fun any(:Args<Wait<E>>)
    for<E> fun race(:Args<Wait<E>>)

for<get T> when-thing Res:
  Ok(res:T); Err(ex:Exception)
  fun get
  fun getMay
  for<R> fun way(ok: Fn1<T,R>, err: Fn1<Exception,R>={throw it}) = when this is:
    Err: err(ex)
    Ok: ok(res)
  for<R> fun seen(op:Fn1<T,R>) = trys { way(op) }
  /** Won't chain too long like Haskell. see [Wait.any] */
  fun `|`(:Res<T>) = way(`it`): you.getMay
  for<B> fun `+`(:Res<B>) = this+`you`
  /** `(File(fp).read+{ fetch(it.lines[0]) }).let: say(B)` */
  for<B> fun `+`(wrap:Fn1<T,Res<B>>) = way({[x] wrap(x).way(`Res.Ok(x to it)`, `Res.Err`)})
  fun Either = when this is:
    Ok: Either.A(res)
    Err: Either.B(ex)

for<T> Async = Wait<Res<T>>

for<T> fun Async<T>.wait(c:FnCont<T>) = c(wait.get)
for<TR> fun Async<T>.seen(then: Fn1<T,R>) = wait: you.wait.seen(then)
for<R> fun Async<R>.seenErr(rescue: Fn1<Exception,R>) = wait: you.wait.way(`it`): rescue(it)